
clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000baa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000baa  00000c3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  0080006a  0080006a  00000c48  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c48  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006d9  00000000  00000000  00000d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000029b  00000000  00000000  00001435  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000328  00000000  00000000  000016d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000240  00000000  00000000  000019f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000316  00000000  00000000  00001c38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000736  00000000  00000000  00001f4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f0  00000000  00000000  00002684  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	e1 00       	.word	0x00e1	; ????
  56:	f5 00       	.word	0x00f5	; ????
  58:	e3 00       	.word	0x00e3	; ????
  5a:	e5 00       	.word	0x00e5	; ????
  5c:	e7 00       	.word	0x00e7	; ????
  5e:	e9 00       	.word	0x00e9	; ????
  60:	eb 00       	.word	0x00eb	; ????
  62:	ed 00       	.word	0x00ed	; ????
  64:	ef 00       	.word	0x00ef	; ????
  66:	f1 00       	.word	0x00f1	; ????

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf e5       	ldi	r28, 0x5F	; 95
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	10 e0       	ldi	r17, 0x00	; 0
  76:	a0 e6       	ldi	r26, 0x60	; 96
  78:	b0 e0       	ldi	r27, 0x00	; 0
  7a:	ea ea       	ldi	r30, 0xAA	; 170
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 36       	cpi	r26, 0x6A	; 106
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	20 e0       	ldi	r18, 0x00	; 0
  8c:	aa e6       	ldi	r26, 0x6A	; 106
  8e:	b0 e0       	ldi	r27, 0x00	; 0
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 38       	cpi	r26, 0x8C	; 140
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 77 02 	call	0x4ee	; 0x4ee <main>
  9e:	0c 94 d3 05 	jmp	0xba6	; 0xba6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_9>:
ISR(TIMER0_OVF_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	4f 93       	push	r20
  b6:	5f 93       	push	r21
  b8:	6f 93       	push	r22
  ba:	7f 93       	push	r23
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
  c0:	af 93       	push	r26
  c2:	bf 93       	push	r27
  c4:	ef 93       	push	r30
  c6:	ff 93       	push	r31
	static volatile int src_nr = 0, counter = 0;
	
	if(counter++ == 10)
  c8:	80 91 72 00 	lds	r24, 0x0072
  cc:	90 91 73 00 	lds	r25, 0x0073
  d0:	9c 01       	movw	r18, r24
  d2:	2f 5f       	subi	r18, 0xFF	; 255
  d4:	3f 4f       	sbci	r19, 0xFF	; 255
  d6:	30 93 73 00 	sts	0x0073, r19
  da:	20 93 72 00 	sts	0x0072, r18
  de:	0a 97       	sbiw	r24, 0x0a	; 10
  e0:	09 f0       	breq	.+2      	; 0xe4 <__vector_9+0x3e>
  e2:	3f c0       	rjmp	.+126    	; 0x162 <__vector_9+0xbc>
	{
		src_nr = (src_nr + 1) % total_displays;
  e4:	80 91 70 00 	lds	r24, 0x0070
  e8:	90 91 71 00 	lds	r25, 0x0071
  ec:	01 96       	adiw	r24, 0x01	; 1
  ee:	60 91 89 00 	lds	r22, 0x0089
  f2:	70 e0       	ldi	r23, 0x00	; 0
  f4:	0e 94 b2 02 	call	0x564	; 0x564 <__divmodhi4>
  f8:	90 93 71 00 	sts	0x0071, r25
  fc:	80 93 70 00 	sts	0x0070, r24
		
		*display_port = (led_type & KATODA) ? (1 << src_nr) : ~(1 << src_nr);
 100:	e0 91 7b 00 	lds	r30, 0x007B
 104:	f0 91 7c 00 	lds	r31, 0x007C
 108:	80 91 79 00 	lds	r24, 0x0079
 10c:	80 ff       	sbrs	r24, 0
 10e:	0a c0       	rjmp	.+20     	; 0x124 <__vector_9+0x7e>
 110:	20 91 70 00 	lds	r18, 0x0070
 114:	30 91 71 00 	lds	r19, 0x0071
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	01 c0       	rjmp	.+2      	; 0x11e <__vector_9+0x78>
 11c:	88 0f       	add	r24, r24
 11e:	2a 95       	dec	r18
 120:	ea f7       	brpl	.-6      	; 0x11c <__vector_9+0x76>
 122:	0e c0       	rjmp	.+28     	; 0x140 <__vector_9+0x9a>
 124:	80 91 70 00 	lds	r24, 0x0070
 128:	90 91 71 00 	lds	r25, 0x0071
 12c:	21 e0       	ldi	r18, 0x01	; 1
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	a9 01       	movw	r20, r18
 132:	02 c0       	rjmp	.+4      	; 0x138 <__vector_9+0x92>
 134:	44 0f       	add	r20, r20
 136:	55 1f       	adc	r21, r21
 138:	8a 95       	dec	r24
 13a:	e2 f7       	brpl	.-8      	; 0x134 <__vector_9+0x8e>
 13c:	ca 01       	movw	r24, r20
 13e:	80 95       	com	r24
 140:	80 83       	st	Z, r24
		*digit_port = number[src_nr];
 142:	e0 91 85 00 	lds	r30, 0x0085
 146:	f0 91 86 00 	lds	r31, 0x0086
 14a:	a0 91 70 00 	lds	r26, 0x0070
 14e:	b0 91 71 00 	lds	r27, 0x0071
 152:	a3 58       	subi	r26, 0x83	; 131
 154:	bf 4f       	sbci	r27, 0xFF	; 255
 156:	8c 91       	ld	r24, X
 158:	80 83       	st	Z, r24
	
		counter = 0;
 15a:	10 92 73 00 	sts	0x0073, r1
 15e:	10 92 72 00 	sts	0x0072, r1
	}
}
 162:	ff 91       	pop	r31
 164:	ef 91       	pop	r30
 166:	bf 91       	pop	r27
 168:	af 91       	pop	r26
 16a:	9f 91       	pop	r25
 16c:	8f 91       	pop	r24
 16e:	7f 91       	pop	r23
 170:	6f 91       	pop	r22
 172:	5f 91       	pop	r21
 174:	4f 91       	pop	r20
 176:	3f 91       	pop	r19
 178:	2f 91       	pop	r18
 17a:	0f 90       	pop	r0
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	0f 90       	pop	r0
 180:	1f 90       	pop	r1
 182:	18 95       	reti

00000184 <clearDisplay>:

void clearDisplay()
{
	int i;
	
	for(i = 0; i < total_displays; i++)
 184:	20 91 89 00 	lds	r18, 0x0089
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	12 16       	cp	r1, r18
 18c:	13 06       	cpc	r1, r19
 18e:	74 f4       	brge	.+28     	; 0x1ac <clearDisplay+0x28>
		number[i] = (led_type & KATODA) ? ~0 : 0;
 190:	40 91 79 00 	lds	r20, 0x0079
 194:	41 70       	andi	r20, 0x01	; 1
 196:	41 95       	neg	r20

void clearDisplay()
{
	int i;
	
	for(i = 0; i < total_displays; i++)
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	90 e0       	ldi	r25, 0x00	; 0
		number[i] = (led_type & KATODA) ? ~0 : 0;
 19c:	fc 01       	movw	r30, r24
 19e:	e3 58       	subi	r30, 0x83	; 131
 1a0:	ff 4f       	sbci	r31, 0xFF	; 255
 1a2:	40 83       	st	Z, r20

void clearDisplay()
{
	int i;
	
	for(i = 0; i < total_displays; i++)
 1a4:	01 96       	adiw	r24, 0x01	; 1
 1a6:	82 17       	cp	r24, r18
 1a8:	93 07       	cpc	r25, r19
 1aa:	c4 f3       	brlt	.-16     	; 0x19c <clearDisplay+0x18>
 1ac:	08 95       	ret

000001ae <convertChar>:

uint8_t convertChar(char s)
{
	uint8_t result = 0;
	
	switch(s)
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	fc 01       	movw	r30, r24
 1b2:	f0 97       	sbiw	r30, 0x30	; 48
 1b4:	ea 30       	cpi	r30, 0x0A	; 10
 1b6:	f1 05       	cpc	r31, r1
 1b8:	b0 f4       	brcc	.+44     	; 0x1e6 <convertChar+0x38>
 1ba:	e6 5d       	subi	r30, 0xD6	; 214
 1bc:	ff 4f       	sbci	r31, 0xFF	; 255
 1be:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__tablejump2__>
	{
		case '0':
			result = 0b00111111;
 1c2:	8f e3       	ldi	r24, 0x3F	; 63
 1c4:	08 95       	ret
		case '1':
			result = 0b00000110;
			break;
		
		case '2':
			result = 0b01011011;
 1c6:	8b e5       	ldi	r24, 0x5B	; 91
			break;
 1c8:	08 95       	ret
		
		case '3':
			result = 0b01001111;
 1ca:	8f e4       	ldi	r24, 0x4F	; 79
			break;
 1cc:	08 95       	ret
		
		case '4':
			result = 0b01100110;
 1ce:	86 e6       	ldi	r24, 0x66	; 102
			break;
 1d0:	08 95       	ret
		
		case '5':
			result = 0b01101101;
 1d2:	8d e6       	ldi	r24, 0x6D	; 109
			break;
 1d4:	08 95       	ret
		
		case '6':
			result = 0b01111101;
 1d6:	8d e7       	ldi	r24, 0x7D	; 125
			break;
 1d8:	08 95       	ret
		
		case '7':
			result = 0b00000111;
 1da:	87 e0       	ldi	r24, 0x07	; 7
			break;
 1dc:	08 95       	ret
		
		case '8':
			result = 0b01111111;
 1de:	8f e7       	ldi	r24, 0x7F	; 127
			break;
 1e0:	08 95       	ret
		
		case '9':
			result = 0b01101111;
 1e2:	8f e6       	ldi	r24, 0x6F	; 111
			break;
 1e4:	08 95       	ret
			
		default:
			result = 0;
 1e6:	80 e0       	ldi	r24, 0x00	; 0
			break;
 1e8:	08 95       	ret
		case '0':
			result = 0b00111111;
			break;
		
		case '1':
			result = 0b00000110;
 1ea:	86 e0       	ldi	r24, 0x06	; 6
			result = 0;
			break;
	}
	
	return result;
}
 1ec:	08 95       	ret

000001ee <LEDSetValue>:
	position = 0;
	set_timer0();
}

void LEDSetValue(char *val)
{
 1ee:	9f 92       	push	r9
 1f0:	af 92       	push	r10
 1f2:	bf 92       	push	r11
 1f4:	cf 92       	push	r12
 1f6:	df 92       	push	r13
 1f8:	ef 92       	push	r14
 1fa:	ff 92       	push	r15
 1fc:	0f 93       	push	r16
 1fe:	1f 93       	push	r17
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
 204:	fc 01       	movw	r30, r24
	int i;
	
	for(i = 0; i < total_displays; i++)
 206:	00 91 89 00 	lds	r16, 0x0089
 20a:	10 e0       	ldi	r17, 0x00	; 0
 20c:	10 16       	cp	r1, r16
 20e:	11 06       	cpc	r1, r17
 210:	7c f5       	brge	.+94     	; 0x270 <LEDSetValue+0x82>
	{
		if(val[i] == '\0')
 212:	20 81       	ld	r18, Z
 214:	22 23       	and	r18, r18
 216:	61 f1       	breq	.+88     	; 0x270 <LEDSetValue+0x82>
			break;
		
		number[(i + position) % total_displays] = (led_type & KATODA) ? ~convertChar(val[i]) : convertChar(val[i]);
 218:	a0 90 7a 00 	lds	r10, 0x007A
 21c:	80 91 79 00 	lds	r24, 0x0079
 220:	81 70       	andi	r24, 0x01	; 1
 222:	98 2e       	mov	r9, r24
 224:	6f 01       	movw	r12, r30
 226:	8f ef       	ldi	r24, 0xFF	; 255
 228:	c8 1a       	sub	r12, r24
 22a:	d8 0a       	sbc	r13, r24

void LEDSetValue(char *val)
{
	int i;
	
	for(i = 0; i < total_displays; i++)
 22c:	c0 e0       	ldi	r28, 0x00	; 0
 22e:	d0 e0       	ldi	r29, 0x00	; 0
 230:	b1 2c       	mov	r11, r1
 232:	05 c0       	rjmp	.+10     	; 0x23e <LEDSetValue+0x50>
	{
		if(val[i] == '\0')
 234:	f6 01       	movw	r30, r12
 236:	21 91       	ld	r18, Z+
 238:	6f 01       	movw	r12, r30
 23a:	22 23       	and	r18, r18
 23c:	c9 f0       	breq	.+50     	; 0x270 <LEDSetValue+0x82>
 23e:	ce 01       	movw	r24, r28
 240:	8a 0d       	add	r24, r10
 242:	9b 1d       	adc	r25, r11
			break;
		
		number[(i + position) % total_displays] = (led_type & KATODA) ? ~convertChar(val[i]) : convertChar(val[i]);
 244:	b8 01       	movw	r22, r16
 246:	0e 94 b2 02 	call	0x564	; 0x564 <__divmodhi4>
 24a:	7c 01       	movw	r14, r24
 24c:	99 20       	and	r9, r9
 24e:	29 f0       	breq	.+10     	; 0x25a <LEDSetValue+0x6c>
 250:	82 2f       	mov	r24, r18
 252:	0e 94 d7 00 	call	0x1ae	; 0x1ae <convertChar>
 256:	80 95       	com	r24
 258:	03 c0       	rjmp	.+6      	; 0x260 <LEDSetValue+0x72>
 25a:	82 2f       	mov	r24, r18
 25c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <convertChar>
 260:	f7 01       	movw	r30, r14
 262:	e3 58       	subi	r30, 0x83	; 131
 264:	ff 4f       	sbci	r31, 0xFF	; 255
 266:	80 83       	st	Z, r24

void LEDSetValue(char *val)
{
	int i;
	
	for(i = 0; i < total_displays; i++)
 268:	21 96       	adiw	r28, 0x01	; 1
 26a:	c0 17       	cp	r28, r16
 26c:	d1 07       	cpc	r29, r17
 26e:	14 f3       	brlt	.-60     	; 0x234 <LEDSetValue+0x46>
		if(val[i] == '\0')
			break;
		
		number[(i + position) % total_displays] = (led_type & KATODA) ? ~convertChar(val[i]) : convertChar(val[i]);
	}
}
 270:	df 91       	pop	r29
 272:	cf 91       	pop	r28
 274:	1f 91       	pop	r17
 276:	0f 91       	pop	r16
 278:	ff 90       	pop	r15
 27a:	ef 90       	pop	r14
 27c:	df 90       	pop	r13
 27e:	cf 90       	pop	r12
 280:	bf 90       	pop	r11
 282:	af 90       	pop	r10
 284:	9f 90       	pop	r9
 286:	08 95       	ret

00000288 <LEDSetNumberWithZero>:
	sprintf(s, "%d\0", nr);
	LEDSetValue(s);
}

void LEDSetNumberWithZero(int nr)
{
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
 28c:	cd b7       	in	r28, 0x3d	; 61
 28e:	de b7       	in	r29, 0x3e	; 62
 290:	29 97       	sbiw	r28, 0x09	; 9
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	f8 94       	cli
 296:	de bf       	out	0x3e, r29	; 62
 298:	0f be       	out	0x3f, r0	; 63
 29a:	cd bf       	out	0x3d, r28	; 61
	char s[MAX_NUM_DISPLAY + 1]; // +1 end char
	
	if(nr < 10)
 29c:	8a 30       	cpi	r24, 0x0A	; 10
 29e:	91 05       	cpc	r25, r1
 2a0:	9c f4       	brge	.+38     	; 0x2c8 <LEDSetNumberWithZero+0x40>
		sprintf(s, "0%d\0", nr);
 2a2:	9f 93       	push	r25
 2a4:	8f 93       	push	r24
 2a6:	84 e6       	ldi	r24, 0x64	; 100
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	9f 93       	push	r25
 2ac:	8f 93       	push	r24
 2ae:	ce 01       	movw	r24, r28
 2b0:	01 96       	adiw	r24, 0x01	; 1
 2b2:	9f 93       	push	r25
 2b4:	8f 93       	push	r24
 2b6:	0e 94 02 03 	call	0x604	; 0x604 <sprintf>
 2ba:	0f 90       	pop	r0
 2bc:	0f 90       	pop	r0
 2be:	0f 90       	pop	r0
 2c0:	0f 90       	pop	r0
 2c2:	0f 90       	pop	r0
 2c4:	0f 90       	pop	r0
 2c6:	12 c0       	rjmp	.+36     	; 0x2ec <LEDSetNumberWithZero+0x64>
	else
		sprintf(s, "%d\0", nr);
 2c8:	9f 93       	push	r25
 2ca:	8f 93       	push	r24
 2cc:	80 e6       	ldi	r24, 0x60	; 96
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	9f 93       	push	r25
 2d2:	8f 93       	push	r24
 2d4:	ce 01       	movw	r24, r28
 2d6:	01 96       	adiw	r24, 0x01	; 1
 2d8:	9f 93       	push	r25
 2da:	8f 93       	push	r24
 2dc:	0e 94 02 03 	call	0x604	; 0x604 <sprintf>
 2e0:	0f 90       	pop	r0
 2e2:	0f 90       	pop	r0
 2e4:	0f 90       	pop	r0
 2e6:	0f 90       	pop	r0
 2e8:	0f 90       	pop	r0
 2ea:	0f 90       	pop	r0
	
	LEDSetValue(s);
 2ec:	ce 01       	movw	r24, r28
 2ee:	01 96       	adiw	r24, 0x01	; 1
 2f0:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LEDSetValue>
}
 2f4:	29 96       	adiw	r28, 0x09	; 9
 2f6:	0f b6       	in	r0, 0x3f	; 63
 2f8:	f8 94       	cli
 2fa:	de bf       	out	0x3e, r29	; 62
 2fc:	0f be       	out	0x3f, r0	; 63
 2fe:	cd bf       	out	0x3d, r28	; 61
 300:	df 91       	pop	r29
 302:	cf 91       	pop	r28
 304:	08 95       	ret

00000306 <set_timer0>:
	return result;
}

void set_timer0()
{
	TCCR0 = 1 << CS01;
 306:	82 e0       	ldi	r24, 0x02	; 2
 308:	83 bf       	out	0x33, r24	; 51
	TIMSK |= 1 << TOIE0;
 30a:	89 b7       	in	r24, 0x39	; 57
 30c:	81 60       	ori	r24, 0x01	; 1
 30e:	89 bf       	out	0x39, r24	; 57
 310:	08 95       	ret

00000312 <LEDInit>:
		counter = 0;
	}
}

void LEDInit(uint8_t total_displays_f, uint8_t led_type_f, volatile uint8_t *digit_ddr_wsk, volatile uint8_t *digit_port_wsk, volatile uint8_t *display_ddr_wsk, volatile uint8_t *display_port_wsk)
{
 312:	ef 92       	push	r14
 314:	ff 92       	push	r15
 316:	0f 93       	push	r16
 318:	1f 93       	push	r17
	total_displays = total_displays_f;
 31a:	80 93 89 00 	sts	0x0089, r24
	led_type = led_type_f % 2;
 31e:	61 70       	andi	r22, 0x01	; 1
 320:	60 93 79 00 	sts	0x0079, r22
	digit_ddr = digit_ddr_wsk;
 324:	50 93 8b 00 	sts	0x008B, r21
 328:	40 93 8a 00 	sts	0x008A, r20
	digit_port = digit_port_wsk;
 32c:	30 93 86 00 	sts	0x0086, r19
 330:	20 93 85 00 	sts	0x0085, r18
	display_ddr = display_ddr_wsk;
 334:	10 93 88 00 	sts	0x0088, r17
 338:	00 93 87 00 	sts	0x0087, r16
	display_port = display_port_wsk;
 33c:	f0 92 7c 00 	sts	0x007C, r15
 340:	e0 92 7b 00 	sts	0x007B, r14
	
	*digit_ddr = 0xFF;
 344:	8f ef       	ldi	r24, 0xFF	; 255
 346:	fa 01       	movw	r30, r20
 348:	80 83       	st	Z, r24
	*digit_port = 0;
 34a:	e0 91 85 00 	lds	r30, 0x0085
 34e:	f0 91 86 00 	lds	r31, 0x0086
 352:	10 82       	st	Z, r1
	*display_ddr = 0;
 354:	e0 91 87 00 	lds	r30, 0x0087
 358:	f0 91 88 00 	lds	r31, 0x0088
 35c:	10 82       	st	Z, r1
	*display_port = 0xFF;
 35e:	e0 91 7b 00 	lds	r30, 0x007B
 362:	f0 91 7c 00 	lds	r31, 0x007C
 366:	80 83       	st	Z, r24
	
	int i;
	for(i = 0; i < total_displays; i++)
 368:	80 91 89 00 	lds	r24, 0x0089
 36c:	88 23       	and	r24, r24
 36e:	c9 f0       	breq	.+50     	; 0x3a2 <LEDInit+0x90>
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	90 e0       	ldi	r25, 0x00	; 0
	{
		*display_ddr |= (1 << i);
 374:	41 e0       	ldi	r20, 0x01	; 1
 376:	50 e0       	ldi	r21, 0x00	; 0
 378:	e0 91 87 00 	lds	r30, 0x0087
 37c:	f0 91 88 00 	lds	r31, 0x0088
 380:	60 81       	ld	r22, Z
 382:	9a 01       	movw	r18, r20
 384:	08 2e       	mov	r0, r24
 386:	02 c0       	rjmp	.+4      	; 0x38c <LEDInit+0x7a>
 388:	22 0f       	add	r18, r18
 38a:	33 1f       	adc	r19, r19
 38c:	0a 94       	dec	r0
 38e:	e2 f7       	brpl	.-8      	; 0x388 <LEDInit+0x76>
 390:	26 2b       	or	r18, r22
 392:	20 83       	st	Z, r18
	*digit_port = 0;
	*display_ddr = 0;
	*display_port = 0xFF;
	
	int i;
	for(i = 0; i < total_displays; i++)
 394:	01 96       	adiw	r24, 0x01	; 1
 396:	20 91 89 00 	lds	r18, 0x0089
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	82 17       	cp	r24, r18
 39e:	93 07       	cpc	r25, r19
 3a0:	5c f3       	brlt	.-42     	; 0x378 <LEDInit+0x66>
	{
		*display_ddr |= (1 << i);
	}
	
	position = 0;
 3a2:	10 92 7a 00 	sts	0x007A, r1
	set_timer0();
 3a6:	0e 94 83 01 	call	0x306	; 0x306 <set_timer0>
}
 3aa:	1f 91       	pop	r17
 3ac:	0f 91       	pop	r16
 3ae:	ff 90       	pop	r15
 3b0:	ef 90       	pop	r14
 3b2:	08 95       	ret

000003b4 <__vector_4>:
ISR(TIMER2_OVF_vect)
{
 3b4:	1f 92       	push	r1
 3b6:	0f 92       	push	r0
 3b8:	0f b6       	in	r0, 0x3f	; 63
 3ba:	0f 92       	push	r0
 3bc:	11 24       	eor	r1, r1
 3be:	8f 93       	push	r24
 3c0:	9f 93       	push	r25
 3c2:	af 93       	push	r26
 3c4:	bf 93       	push	r27
	TCCR2 = (1 << CS22) | (1 << CS20);
 3c6:	85 e0       	ldi	r24, 0x05	; 5
 3c8:	85 bd       	out	0x25, r24	; 37
	
	if(CLOCKStatus & (1 << ACTIVE_STATUS))
 3ca:	80 91 74 00 	lds	r24, 0x0074
 3ce:	81 ff       	sbrs	r24, 1
 3d0:	40 c0       	rjmp	.+128    	; 0x452 <__vector_4+0x9e>
	{
		if(CLOCKStatus & (1 << REVERSE_CLOCK))
 3d2:	80 91 74 00 	lds	r24, 0x0074
 3d6:	82 ff       	sbrs	r24, 2
 3d8:	20 c0       	rjmp	.+64     	; 0x41a <__vector_4+0x66>
		{
			if(CLOCKTime > 0)
 3da:	80 91 75 00 	lds	r24, 0x0075
 3de:	90 91 76 00 	lds	r25, 0x0076
 3e2:	a0 91 77 00 	lds	r26, 0x0077
 3e6:	b0 91 78 00 	lds	r27, 0x0078
 3ea:	89 2b       	or	r24, r25
 3ec:	8a 2b       	or	r24, r26
 3ee:	8b 2b       	or	r24, r27
 3f0:	39 f1       	breq	.+78     	; 0x440 <__vector_4+0x8c>
			CLOCKTime -= 1;
 3f2:	80 91 75 00 	lds	r24, 0x0075
 3f6:	90 91 76 00 	lds	r25, 0x0076
 3fa:	a0 91 77 00 	lds	r26, 0x0077
 3fe:	b0 91 78 00 	lds	r27, 0x0078
 402:	01 97       	sbiw	r24, 0x01	; 1
 404:	a1 09       	sbc	r26, r1
 406:	b1 09       	sbc	r27, r1
 408:	80 93 75 00 	sts	0x0075, r24
 40c:	90 93 76 00 	sts	0x0076, r25
 410:	a0 93 77 00 	sts	0x0077, r26
 414:	b0 93 78 00 	sts	0x0078, r27
 418:	13 c0       	rjmp	.+38     	; 0x440 <__vector_4+0x8c>
		}
		else
			CLOCKTime = (CLOCKTime + 1);
 41a:	80 91 75 00 	lds	r24, 0x0075
 41e:	90 91 76 00 	lds	r25, 0x0076
 422:	a0 91 77 00 	lds	r26, 0x0077
 426:	b0 91 78 00 	lds	r27, 0x0078
 42a:	01 96       	adiw	r24, 0x01	; 1
 42c:	a1 1d       	adc	r26, r1
 42e:	b1 1d       	adc	r27, r1
 430:	80 93 75 00 	sts	0x0075, r24
 434:	90 93 76 00 	sts	0x0076, r25
 438:	a0 93 77 00 	sts	0x0077, r26
 43c:	b0 93 78 00 	sts	0x0078, r27
		
		if(!(CLOCKStatus & (1 << CHANGE_STATUS)))
 440:	80 91 74 00 	lds	r24, 0x0074
 444:	80 fd       	sbrc	r24, 0
 446:	05 c0       	rjmp	.+10     	; 0x452 <__vector_4+0x9e>
			CLOCKStatus |= (1 << CHANGE_STATUS);	
 448:	80 91 74 00 	lds	r24, 0x0074
 44c:	81 60       	ori	r24, 0x01	; 1
 44e:	80 93 74 00 	sts	0x0074, r24
	}
}
 452:	bf 91       	pop	r27
 454:	af 91       	pop	r26
 456:	9f 91       	pop	r25
 458:	8f 91       	pop	r24
 45a:	0f 90       	pop	r0
 45c:	0f be       	out	0x3f, r0	; 63
 45e:	0f 90       	pop	r0
 460:	1f 90       	pop	r1
 462:	18 95       	reti

00000464 <getTime>:
{
	return (int)CLOCKTime / HOUR_SECONDS;
}

int * getTime()
{
 464:	0f 93       	push	r16
 466:	1f 93       	push	r17
	static int time[3]; // [0] -> h, [1] -> m, [2] -> s
	uint32_t tmpTime = CLOCKTime;
 468:	00 91 75 00 	lds	r16, 0x0075
 46c:	10 91 76 00 	lds	r17, 0x0076
 470:	20 91 77 00 	lds	r18, 0x0077
 474:	30 91 78 00 	lds	r19, 0x0078
	return (int)CLOCKTime / MINUTE_SECONDS;
}

int getHours()
{
	return (int)CLOCKTime / HOUR_SECONDS;
 478:	80 91 75 00 	lds	r24, 0x0075
 47c:	90 91 76 00 	lds	r25, 0x0076
 480:	a0 91 77 00 	lds	r26, 0x0077
 484:	b0 91 78 00 	lds	r27, 0x0078
 488:	60 e1       	ldi	r22, 0x10	; 16
 48a:	7e e0       	ldi	r23, 0x0E	; 14
 48c:	0e 94 b2 02 	call	0x564	; 0x564 <__divmodhi4>
int * getTime()
{
	static int time[3]; // [0] -> h, [1] -> m, [2] -> s
	uint32_t tmpTime = CLOCKTime;
	
	time[0] = getHours(),					tmpTime %= HOUR_SECONDS;
 490:	70 93 6b 00 	sts	0x006B, r23
 494:	60 93 6a 00 	sts	0x006A, r22
 498:	c9 01       	movw	r24, r18
 49a:	b8 01       	movw	r22, r16
 49c:	20 e1       	ldi	r18, 0x10	; 16
 49e:	3e e0       	ldi	r19, 0x0E	; 14
 4a0:	40 e0       	ldi	r20, 0x00	; 0
 4a2:	50 e0       	ldi	r21, 0x00	; 0
 4a4:	0e 94 c6 02 	call	0x58c	; 0x58c <__udivmodsi4>
	time[1] = tmpTime / MINUTE_SECONDS,		tmpTime %= MINUTE_SECONDS;
 4a8:	2c e3       	ldi	r18, 0x3C	; 60
 4aa:	30 e0       	ldi	r19, 0x00	; 0
 4ac:	40 e0       	ldi	r20, 0x00	; 0
 4ae:	50 e0       	ldi	r21, 0x00	; 0
 4b0:	0e 94 c6 02 	call	0x58c	; 0x58c <__udivmodsi4>
 4b4:	30 93 6d 00 	sts	0x006D, r19
 4b8:	20 93 6c 00 	sts	0x006C, r18
	time[2] = tmpTime;
 4bc:	70 93 6f 00 	sts	0x006F, r23
 4c0:	60 93 6e 00 	sts	0x006E, r22
	
	return time;
}
 4c4:	8a e6       	ldi	r24, 0x6A	; 106
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	1f 91       	pop	r17
 4ca:	0f 91       	pop	r16
 4cc:	08 95       	ret

000004ce <CLOCKStart>:
void CLOCKStart()
{
	/*
		this must be before set CLOCKStatus, because in otherwise timer will increase its value twice
	*/
	TIMSK |= (1 << TOIE2);
 4ce:	89 b7       	in	r24, 0x39	; 57
 4d0:	80 64       	ori	r24, 0x40	; 64
 4d2:	89 bf       	out	0x39, r24	; 57
	CLOCKStatus |= (1 << ACTIVE_STATUS);
 4d4:	80 91 74 00 	lds	r24, 0x0074
 4d8:	82 60       	ori	r24, 0x02	; 2
 4da:	80 93 74 00 	sts	0x0074, r24
 4de:	08 95       	ret

000004e0 <CLOCKInit>:
		return 0;
}

void CLOCKInit()
{
	ASSR |= (1 << AS2); // set timer in async mode
 4e0:	82 b5       	in	r24, 0x22	; 34
 4e2:	88 60       	ori	r24, 0x08	; 8
 4e4:	82 bd       	out	0x22, r24	; 34
	
	TCNT2 = 0;
 4e6:	14 bc       	out	0x24, r1	; 36
	TCCR2 = (1 << CS22) | (1 << CS20);
 4e8:	85 e0       	ldi	r24, 0x05	; 5
 4ea:	85 bd       	out	0x25, r24	; 37
 4ec:	08 95       	ret

000004ee <main>:
#include <avr/io.h>
#include <avr/interrupt.h>

int main(void)
{
    DDRB = 0x00000001;
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b00011110;
 4f2:	8e e1       	ldi	r24, 0x1E	; 30
 4f4:	88 bb       	out	0x18, r24	; 24
	
	
	LEDInit(6, 1, &DDRD, &PORTD, &DDRC, &PORTC);
 4f6:	0f 2e       	mov	r0, r31
 4f8:	f5 e3       	ldi	r31, 0x35	; 53
 4fa:	ef 2e       	mov	r14, r31
 4fc:	f1 2c       	mov	r15, r1
 4fe:	f0 2d       	mov	r31, r0
 500:	04 e3       	ldi	r16, 0x34	; 52
 502:	10 e0       	ldi	r17, 0x00	; 0
 504:	22 e3       	ldi	r18, 0x32	; 50
 506:	30 e0       	ldi	r19, 0x00	; 0
 508:	41 e3       	ldi	r20, 0x31	; 49
 50a:	50 e0       	ldi	r21, 0x00	; 0
 50c:	61 e0       	ldi	r22, 0x01	; 1
 50e:	86 e0       	ldi	r24, 0x06	; 6
 510:	0e 94 89 01 	call	0x312	; 0x312 <LEDInit>
	CLOCKInit();
 514:	0e 94 70 02 	call	0x4e0	; 0x4e0 <CLOCKInit>
	sei();
 518:	78 94       	sei
	
	clearDisplay();
 51a:	0e 94 c2 00 	call	0x184	; 0x184 <clearDisplay>
	CLOCKStart();
 51e:	0e 94 67 02 	call	0x4ce	; 0x4ce <CLOCKStart>
	}
}

void LEDSetPosition(uint8_t pos)
{
	position = pos % MAX_NUM_DISPLAY;
 522:	02 e0       	ldi	r16, 0x02	; 2
 524:	14 e0       	ldi	r17, 0x04	; 4
	
	while(1)
	{
		if(CLOCKStatus & (1 << CHANGE_STATUS))
 526:	80 91 74 00 	lds	r24, 0x0074
 52a:	80 ff       	sbrs	r24, 0
 52c:	fc cf       	rjmp	.-8      	; 0x526 <main+0x38>
		{
			int *tab = getTime();
 52e:	0e 94 32 02 	call	0x464	; 0x464 <getTime>
 532:	ec 01       	movw	r28, r24
 534:	10 92 7a 00 	sts	0x007A, r1
		
			LEDSetPosition(0);
			LEDSetNumberWithZero(tab[0]);
 538:	88 81       	ld	r24, Y
 53a:	99 81       	ldd	r25, Y+1	; 0x01
 53c:	0e 94 44 01 	call	0x288	; 0x288 <LEDSetNumberWithZero>
 540:	00 93 7a 00 	sts	0x007A, r16
		
		 	LEDSetPosition(2);
		 	LEDSetNumberWithZero(tab[1]);
 544:	8a 81       	ldd	r24, Y+2	; 0x02
 546:	9b 81       	ldd	r25, Y+3	; 0x03
 548:	0e 94 44 01 	call	0x288	; 0x288 <LEDSetNumberWithZero>
 54c:	10 93 7a 00 	sts	0x007A, r17
		 		
			LEDSetPosition(4);
			LEDSetNumberWithZero(tab[2]);
 550:	8c 81       	ldd	r24, Y+4	; 0x04
 552:	9d 81       	ldd	r25, Y+5	; 0x05
 554:	0e 94 44 01 	call	0x288	; 0x288 <LEDSetNumberWithZero>
		
 		 	CLOCKStatus &= ~(1 << CHANGE_STATUS);
 558:	80 91 74 00 	lds	r24, 0x0074
 55c:	8e 7f       	andi	r24, 0xFE	; 254
 55e:	80 93 74 00 	sts	0x0074, r24
 562:	e1 cf       	rjmp	.-62     	; 0x526 <main+0x38>

00000564 <__divmodhi4>:
 564:	97 fb       	bst	r25, 7
 566:	07 2e       	mov	r0, r23
 568:	16 f4       	brtc	.+4      	; 0x56e <__divmodhi4+0xa>
 56a:	00 94       	com	r0
 56c:	07 d0       	rcall	.+14     	; 0x57c <__divmodhi4_neg1>
 56e:	77 fd       	sbrc	r23, 7
 570:	09 d0       	rcall	.+18     	; 0x584 <__divmodhi4_neg2>
 572:	0e 94 ee 02 	call	0x5dc	; 0x5dc <__udivmodhi4>
 576:	07 fc       	sbrc	r0, 7
 578:	05 d0       	rcall	.+10     	; 0x584 <__divmodhi4_neg2>
 57a:	3e f4       	brtc	.+14     	; 0x58a <__divmodhi4_exit>

0000057c <__divmodhi4_neg1>:
 57c:	90 95       	com	r25
 57e:	81 95       	neg	r24
 580:	9f 4f       	sbci	r25, 0xFF	; 255
 582:	08 95       	ret

00000584 <__divmodhi4_neg2>:
 584:	70 95       	com	r23
 586:	61 95       	neg	r22
 588:	7f 4f       	sbci	r23, 0xFF	; 255

0000058a <__divmodhi4_exit>:
 58a:	08 95       	ret

0000058c <__udivmodsi4>:
 58c:	a1 e2       	ldi	r26, 0x21	; 33
 58e:	1a 2e       	mov	r1, r26
 590:	aa 1b       	sub	r26, r26
 592:	bb 1b       	sub	r27, r27
 594:	fd 01       	movw	r30, r26
 596:	0d c0       	rjmp	.+26     	; 0x5b2 <__udivmodsi4_ep>

00000598 <__udivmodsi4_loop>:
 598:	aa 1f       	adc	r26, r26
 59a:	bb 1f       	adc	r27, r27
 59c:	ee 1f       	adc	r30, r30
 59e:	ff 1f       	adc	r31, r31
 5a0:	a2 17       	cp	r26, r18
 5a2:	b3 07       	cpc	r27, r19
 5a4:	e4 07       	cpc	r30, r20
 5a6:	f5 07       	cpc	r31, r21
 5a8:	20 f0       	brcs	.+8      	; 0x5b2 <__udivmodsi4_ep>
 5aa:	a2 1b       	sub	r26, r18
 5ac:	b3 0b       	sbc	r27, r19
 5ae:	e4 0b       	sbc	r30, r20
 5b0:	f5 0b       	sbc	r31, r21

000005b2 <__udivmodsi4_ep>:
 5b2:	66 1f       	adc	r22, r22
 5b4:	77 1f       	adc	r23, r23
 5b6:	88 1f       	adc	r24, r24
 5b8:	99 1f       	adc	r25, r25
 5ba:	1a 94       	dec	r1
 5bc:	69 f7       	brne	.-38     	; 0x598 <__udivmodsi4_loop>
 5be:	60 95       	com	r22
 5c0:	70 95       	com	r23
 5c2:	80 95       	com	r24
 5c4:	90 95       	com	r25
 5c6:	9b 01       	movw	r18, r22
 5c8:	ac 01       	movw	r20, r24
 5ca:	bd 01       	movw	r22, r26
 5cc:	cf 01       	movw	r24, r30
 5ce:	08 95       	ret

000005d0 <__tablejump2__>:
 5d0:	ee 0f       	add	r30, r30
 5d2:	ff 1f       	adc	r31, r31

000005d4 <__tablejump__>:
 5d4:	05 90       	lpm	r0, Z+
 5d6:	f4 91       	lpm	r31, Z
 5d8:	e0 2d       	mov	r30, r0
 5da:	09 94       	ijmp

000005dc <__udivmodhi4>:
 5dc:	aa 1b       	sub	r26, r26
 5de:	bb 1b       	sub	r27, r27
 5e0:	51 e1       	ldi	r21, 0x11	; 17
 5e2:	07 c0       	rjmp	.+14     	; 0x5f2 <__udivmodhi4_ep>

000005e4 <__udivmodhi4_loop>:
 5e4:	aa 1f       	adc	r26, r26
 5e6:	bb 1f       	adc	r27, r27
 5e8:	a6 17       	cp	r26, r22
 5ea:	b7 07       	cpc	r27, r23
 5ec:	10 f0       	brcs	.+4      	; 0x5f2 <__udivmodhi4_ep>
 5ee:	a6 1b       	sub	r26, r22
 5f0:	b7 0b       	sbc	r27, r23

000005f2 <__udivmodhi4_ep>:
 5f2:	88 1f       	adc	r24, r24
 5f4:	99 1f       	adc	r25, r25
 5f6:	5a 95       	dec	r21
 5f8:	a9 f7       	brne	.-22     	; 0x5e4 <__udivmodhi4_loop>
 5fa:	80 95       	com	r24
 5fc:	90 95       	com	r25
 5fe:	bc 01       	movw	r22, r24
 600:	cd 01       	movw	r24, r26
 602:	08 95       	ret

00000604 <sprintf>:
 604:	ae e0       	ldi	r26, 0x0E	; 14
 606:	b0 e0       	ldi	r27, 0x00	; 0
 608:	e8 e0       	ldi	r30, 0x08	; 8
 60a:	f3 e0       	ldi	r31, 0x03	; 3
 60c:	0c 94 aa 05 	jmp	0xb54	; 0xb54 <__prologue_saves__+0x1c>
 610:	0d 89       	ldd	r16, Y+21	; 0x15
 612:	1e 89       	ldd	r17, Y+22	; 0x16
 614:	86 e0       	ldi	r24, 0x06	; 6
 616:	8c 83       	std	Y+4, r24	; 0x04
 618:	1a 83       	std	Y+2, r17	; 0x02
 61a:	09 83       	std	Y+1, r16	; 0x01
 61c:	8f ef       	ldi	r24, 0xFF	; 255
 61e:	9f e7       	ldi	r25, 0x7F	; 127
 620:	9e 83       	std	Y+6, r25	; 0x06
 622:	8d 83       	std	Y+5, r24	; 0x05
 624:	ae 01       	movw	r20, r28
 626:	47 5e       	subi	r20, 0xE7	; 231
 628:	5f 4f       	sbci	r21, 0xFF	; 255
 62a:	6f 89       	ldd	r22, Y+23	; 0x17
 62c:	78 8d       	ldd	r23, Y+24	; 0x18
 62e:	ce 01       	movw	r24, r28
 630:	01 96       	adiw	r24, 0x01	; 1
 632:	0e 94 24 03 	call	0x648	; 0x648 <vfprintf>
 636:	ef 81       	ldd	r30, Y+7	; 0x07
 638:	f8 85       	ldd	r31, Y+8	; 0x08
 63a:	e0 0f       	add	r30, r16
 63c:	f1 1f       	adc	r31, r17
 63e:	10 82       	st	Z, r1
 640:	2e 96       	adiw	r28, 0x0e	; 14
 642:	e4 e0       	ldi	r30, 0x04	; 4
 644:	0c 94 c6 05 	jmp	0xb8c	; 0xb8c <__epilogue_restores__+0x1c>

00000648 <vfprintf>:
 648:	ac e0       	ldi	r26, 0x0C	; 12
 64a:	b0 e0       	ldi	r27, 0x00	; 0
 64c:	ea e2       	ldi	r30, 0x2A	; 42
 64e:	f3 e0       	ldi	r31, 0x03	; 3
 650:	0c 94 9c 05 	jmp	0xb38	; 0xb38 <__prologue_saves__>
 654:	7c 01       	movw	r14, r24
 656:	6b 01       	movw	r12, r22
 658:	8a 01       	movw	r16, r20
 65a:	fc 01       	movw	r30, r24
 65c:	17 82       	std	Z+7, r1	; 0x07
 65e:	16 82       	std	Z+6, r1	; 0x06
 660:	83 81       	ldd	r24, Z+3	; 0x03
 662:	81 ff       	sbrs	r24, 1
 664:	bd c1       	rjmp	.+890    	; 0x9e0 <vfprintf+0x398>
 666:	ce 01       	movw	r24, r28
 668:	01 96       	adiw	r24, 0x01	; 1
 66a:	4c 01       	movw	r8, r24
 66c:	f7 01       	movw	r30, r14
 66e:	93 81       	ldd	r25, Z+3	; 0x03
 670:	f6 01       	movw	r30, r12
 672:	93 fd       	sbrc	r25, 3
 674:	85 91       	lpm	r24, Z+
 676:	93 ff       	sbrs	r25, 3
 678:	81 91       	ld	r24, Z+
 67a:	6f 01       	movw	r12, r30
 67c:	88 23       	and	r24, r24
 67e:	09 f4       	brne	.+2      	; 0x682 <vfprintf+0x3a>
 680:	ab c1       	rjmp	.+854    	; 0x9d8 <vfprintf+0x390>
 682:	85 32       	cpi	r24, 0x25	; 37
 684:	39 f4       	brne	.+14     	; 0x694 <vfprintf+0x4c>
 686:	93 fd       	sbrc	r25, 3
 688:	85 91       	lpm	r24, Z+
 68a:	93 ff       	sbrs	r25, 3
 68c:	81 91       	ld	r24, Z+
 68e:	6f 01       	movw	r12, r30
 690:	85 32       	cpi	r24, 0x25	; 37
 692:	29 f4       	brne	.+10     	; 0x69e <vfprintf+0x56>
 694:	b7 01       	movw	r22, r14
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	0e 94 0c 05 	call	0xa18	; 0xa18 <fputc>
 69c:	e7 cf       	rjmp	.-50     	; 0x66c <vfprintf+0x24>
 69e:	51 2c       	mov	r5, r1
 6a0:	31 2c       	mov	r3, r1
 6a2:	20 e0       	ldi	r18, 0x00	; 0
 6a4:	20 32       	cpi	r18, 0x20	; 32
 6a6:	a0 f4       	brcc	.+40     	; 0x6d0 <vfprintf+0x88>
 6a8:	8b 32       	cpi	r24, 0x2B	; 43
 6aa:	69 f0       	breq	.+26     	; 0x6c6 <vfprintf+0x7e>
 6ac:	30 f4       	brcc	.+12     	; 0x6ba <vfprintf+0x72>
 6ae:	80 32       	cpi	r24, 0x20	; 32
 6b0:	59 f0       	breq	.+22     	; 0x6c8 <vfprintf+0x80>
 6b2:	83 32       	cpi	r24, 0x23	; 35
 6b4:	69 f4       	brne	.+26     	; 0x6d0 <vfprintf+0x88>
 6b6:	20 61       	ori	r18, 0x10	; 16
 6b8:	2c c0       	rjmp	.+88     	; 0x712 <vfprintf+0xca>
 6ba:	8d 32       	cpi	r24, 0x2D	; 45
 6bc:	39 f0       	breq	.+14     	; 0x6cc <vfprintf+0x84>
 6be:	80 33       	cpi	r24, 0x30	; 48
 6c0:	39 f4       	brne	.+14     	; 0x6d0 <vfprintf+0x88>
 6c2:	21 60       	ori	r18, 0x01	; 1
 6c4:	26 c0       	rjmp	.+76     	; 0x712 <vfprintf+0xca>
 6c6:	22 60       	ori	r18, 0x02	; 2
 6c8:	24 60       	ori	r18, 0x04	; 4
 6ca:	23 c0       	rjmp	.+70     	; 0x712 <vfprintf+0xca>
 6cc:	28 60       	ori	r18, 0x08	; 8
 6ce:	21 c0       	rjmp	.+66     	; 0x712 <vfprintf+0xca>
 6d0:	27 fd       	sbrc	r18, 7
 6d2:	27 c0       	rjmp	.+78     	; 0x722 <vfprintf+0xda>
 6d4:	30 ed       	ldi	r19, 0xD0	; 208
 6d6:	38 0f       	add	r19, r24
 6d8:	3a 30       	cpi	r19, 0x0A	; 10
 6da:	78 f4       	brcc	.+30     	; 0x6fa <vfprintf+0xb2>
 6dc:	26 ff       	sbrs	r18, 6
 6de:	06 c0       	rjmp	.+12     	; 0x6ec <vfprintf+0xa4>
 6e0:	fa e0       	ldi	r31, 0x0A	; 10
 6e2:	5f 9e       	mul	r5, r31
 6e4:	30 0d       	add	r19, r0
 6e6:	11 24       	eor	r1, r1
 6e8:	53 2e       	mov	r5, r19
 6ea:	13 c0       	rjmp	.+38     	; 0x712 <vfprintf+0xca>
 6ec:	8a e0       	ldi	r24, 0x0A	; 10
 6ee:	38 9e       	mul	r3, r24
 6f0:	30 0d       	add	r19, r0
 6f2:	11 24       	eor	r1, r1
 6f4:	33 2e       	mov	r3, r19
 6f6:	20 62       	ori	r18, 0x20	; 32
 6f8:	0c c0       	rjmp	.+24     	; 0x712 <vfprintf+0xca>
 6fa:	8e 32       	cpi	r24, 0x2E	; 46
 6fc:	21 f4       	brne	.+8      	; 0x706 <vfprintf+0xbe>
 6fe:	26 fd       	sbrc	r18, 6
 700:	6b c1       	rjmp	.+726    	; 0x9d8 <vfprintf+0x390>
 702:	20 64       	ori	r18, 0x40	; 64
 704:	06 c0       	rjmp	.+12     	; 0x712 <vfprintf+0xca>
 706:	8c 36       	cpi	r24, 0x6C	; 108
 708:	11 f4       	brne	.+4      	; 0x70e <vfprintf+0xc6>
 70a:	20 68       	ori	r18, 0x80	; 128
 70c:	02 c0       	rjmp	.+4      	; 0x712 <vfprintf+0xca>
 70e:	88 36       	cpi	r24, 0x68	; 104
 710:	41 f4       	brne	.+16     	; 0x722 <vfprintf+0xda>
 712:	f6 01       	movw	r30, r12
 714:	93 fd       	sbrc	r25, 3
 716:	85 91       	lpm	r24, Z+
 718:	93 ff       	sbrs	r25, 3
 71a:	81 91       	ld	r24, Z+
 71c:	6f 01       	movw	r12, r30
 71e:	81 11       	cpse	r24, r1
 720:	c1 cf       	rjmp	.-126    	; 0x6a4 <vfprintf+0x5c>
 722:	98 2f       	mov	r25, r24
 724:	9f 7d       	andi	r25, 0xDF	; 223
 726:	95 54       	subi	r25, 0x45	; 69
 728:	93 30       	cpi	r25, 0x03	; 3
 72a:	28 f4       	brcc	.+10     	; 0x736 <vfprintf+0xee>
 72c:	0c 5f       	subi	r16, 0xFC	; 252
 72e:	1f 4f       	sbci	r17, 0xFF	; 255
 730:	ff e3       	ldi	r31, 0x3F	; 63
 732:	f9 83       	std	Y+1, r31	; 0x01
 734:	0d c0       	rjmp	.+26     	; 0x750 <vfprintf+0x108>
 736:	83 36       	cpi	r24, 0x63	; 99
 738:	31 f0       	breq	.+12     	; 0x746 <vfprintf+0xfe>
 73a:	83 37       	cpi	r24, 0x73	; 115
 73c:	71 f0       	breq	.+28     	; 0x75a <vfprintf+0x112>
 73e:	83 35       	cpi	r24, 0x53	; 83
 740:	09 f0       	breq	.+2      	; 0x744 <vfprintf+0xfc>
 742:	5b c0       	rjmp	.+182    	; 0x7fa <vfprintf+0x1b2>
 744:	22 c0       	rjmp	.+68     	; 0x78a <vfprintf+0x142>
 746:	f8 01       	movw	r30, r16
 748:	80 81       	ld	r24, Z
 74a:	89 83       	std	Y+1, r24	; 0x01
 74c:	0e 5f       	subi	r16, 0xFE	; 254
 74e:	1f 4f       	sbci	r17, 0xFF	; 255
 750:	44 24       	eor	r4, r4
 752:	43 94       	inc	r4
 754:	51 2c       	mov	r5, r1
 756:	54 01       	movw	r10, r8
 758:	15 c0       	rjmp	.+42     	; 0x784 <vfprintf+0x13c>
 75a:	38 01       	movw	r6, r16
 75c:	f2 e0       	ldi	r31, 0x02	; 2
 75e:	6f 0e       	add	r6, r31
 760:	71 1c       	adc	r7, r1
 762:	f8 01       	movw	r30, r16
 764:	a0 80       	ld	r10, Z
 766:	b1 80       	ldd	r11, Z+1	; 0x01
 768:	26 ff       	sbrs	r18, 6
 76a:	03 c0       	rjmp	.+6      	; 0x772 <vfprintf+0x12a>
 76c:	65 2d       	mov	r22, r5
 76e:	70 e0       	ldi	r23, 0x00	; 0
 770:	02 c0       	rjmp	.+4      	; 0x776 <vfprintf+0x12e>
 772:	6f ef       	ldi	r22, 0xFF	; 255
 774:	7f ef       	ldi	r23, 0xFF	; 255
 776:	c5 01       	movw	r24, r10
 778:	2c 87       	std	Y+12, r18	; 0x0c
 77a:	0e 94 01 05 	call	0xa02	; 0xa02 <strnlen>
 77e:	2c 01       	movw	r4, r24
 780:	83 01       	movw	r16, r6
 782:	2c 85       	ldd	r18, Y+12	; 0x0c
 784:	2f 77       	andi	r18, 0x7F	; 127
 786:	22 2e       	mov	r2, r18
 788:	17 c0       	rjmp	.+46     	; 0x7b8 <vfprintf+0x170>
 78a:	38 01       	movw	r6, r16
 78c:	f2 e0       	ldi	r31, 0x02	; 2
 78e:	6f 0e       	add	r6, r31
 790:	71 1c       	adc	r7, r1
 792:	f8 01       	movw	r30, r16
 794:	a0 80       	ld	r10, Z
 796:	b1 80       	ldd	r11, Z+1	; 0x01
 798:	26 ff       	sbrs	r18, 6
 79a:	03 c0       	rjmp	.+6      	; 0x7a2 <vfprintf+0x15a>
 79c:	65 2d       	mov	r22, r5
 79e:	70 e0       	ldi	r23, 0x00	; 0
 7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <vfprintf+0x15e>
 7a2:	6f ef       	ldi	r22, 0xFF	; 255
 7a4:	7f ef       	ldi	r23, 0xFF	; 255
 7a6:	c5 01       	movw	r24, r10
 7a8:	2c 87       	std	Y+12, r18	; 0x0c
 7aa:	0e 94 f6 04 	call	0x9ec	; 0x9ec <strnlen_P>
 7ae:	2c 01       	movw	r4, r24
 7b0:	2c 85       	ldd	r18, Y+12	; 0x0c
 7b2:	20 68       	ori	r18, 0x80	; 128
 7b4:	22 2e       	mov	r2, r18
 7b6:	83 01       	movw	r16, r6
 7b8:	23 fc       	sbrc	r2, 3
 7ba:	1b c0       	rjmp	.+54     	; 0x7f2 <vfprintf+0x1aa>
 7bc:	83 2d       	mov	r24, r3
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	48 16       	cp	r4, r24
 7c2:	59 06       	cpc	r5, r25
 7c4:	b0 f4       	brcc	.+44     	; 0x7f2 <vfprintf+0x1aa>
 7c6:	b7 01       	movw	r22, r14
 7c8:	80 e2       	ldi	r24, 0x20	; 32
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	0e 94 0c 05 	call	0xa18	; 0xa18 <fputc>
 7d0:	3a 94       	dec	r3
 7d2:	f4 cf       	rjmp	.-24     	; 0x7bc <vfprintf+0x174>
 7d4:	f5 01       	movw	r30, r10
 7d6:	27 fc       	sbrc	r2, 7
 7d8:	85 91       	lpm	r24, Z+
 7da:	27 fe       	sbrs	r2, 7
 7dc:	81 91       	ld	r24, Z+
 7de:	5f 01       	movw	r10, r30
 7e0:	b7 01       	movw	r22, r14
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	0e 94 0c 05 	call	0xa18	; 0xa18 <fputc>
 7e8:	31 10       	cpse	r3, r1
 7ea:	3a 94       	dec	r3
 7ec:	f1 e0       	ldi	r31, 0x01	; 1
 7ee:	4f 1a       	sub	r4, r31
 7f0:	51 08       	sbc	r5, r1
 7f2:	41 14       	cp	r4, r1
 7f4:	51 04       	cpc	r5, r1
 7f6:	71 f7       	brne	.-36     	; 0x7d4 <vfprintf+0x18c>
 7f8:	e5 c0       	rjmp	.+458    	; 0x9c4 <vfprintf+0x37c>
 7fa:	84 36       	cpi	r24, 0x64	; 100
 7fc:	11 f0       	breq	.+4      	; 0x802 <vfprintf+0x1ba>
 7fe:	89 36       	cpi	r24, 0x69	; 105
 800:	39 f5       	brne	.+78     	; 0x850 <vfprintf+0x208>
 802:	f8 01       	movw	r30, r16
 804:	27 ff       	sbrs	r18, 7
 806:	07 c0       	rjmp	.+14     	; 0x816 <vfprintf+0x1ce>
 808:	60 81       	ld	r22, Z
 80a:	71 81       	ldd	r23, Z+1	; 0x01
 80c:	82 81       	ldd	r24, Z+2	; 0x02
 80e:	93 81       	ldd	r25, Z+3	; 0x03
 810:	0c 5f       	subi	r16, 0xFC	; 252
 812:	1f 4f       	sbci	r17, 0xFF	; 255
 814:	08 c0       	rjmp	.+16     	; 0x826 <vfprintf+0x1de>
 816:	60 81       	ld	r22, Z
 818:	71 81       	ldd	r23, Z+1	; 0x01
 81a:	88 27       	eor	r24, r24
 81c:	77 fd       	sbrc	r23, 7
 81e:	80 95       	com	r24
 820:	98 2f       	mov	r25, r24
 822:	0e 5f       	subi	r16, 0xFE	; 254
 824:	1f 4f       	sbci	r17, 0xFF	; 255
 826:	2f 76       	andi	r18, 0x6F	; 111
 828:	b2 2e       	mov	r11, r18
 82a:	97 ff       	sbrs	r25, 7
 82c:	09 c0       	rjmp	.+18     	; 0x840 <vfprintf+0x1f8>
 82e:	90 95       	com	r25
 830:	80 95       	com	r24
 832:	70 95       	com	r23
 834:	61 95       	neg	r22
 836:	7f 4f       	sbci	r23, 0xFF	; 255
 838:	8f 4f       	sbci	r24, 0xFF	; 255
 83a:	9f 4f       	sbci	r25, 0xFF	; 255
 83c:	20 68       	ori	r18, 0x80	; 128
 83e:	b2 2e       	mov	r11, r18
 840:	2a e0       	ldi	r18, 0x0A	; 10
 842:	30 e0       	ldi	r19, 0x00	; 0
 844:	a4 01       	movw	r20, r8
 846:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__ultoa_invert>
 84a:	a8 2e       	mov	r10, r24
 84c:	a8 18       	sub	r10, r8
 84e:	44 c0       	rjmp	.+136    	; 0x8d8 <vfprintf+0x290>
 850:	85 37       	cpi	r24, 0x75	; 117
 852:	29 f4       	brne	.+10     	; 0x85e <vfprintf+0x216>
 854:	2f 7e       	andi	r18, 0xEF	; 239
 856:	b2 2e       	mov	r11, r18
 858:	2a e0       	ldi	r18, 0x0A	; 10
 85a:	30 e0       	ldi	r19, 0x00	; 0
 85c:	25 c0       	rjmp	.+74     	; 0x8a8 <vfprintf+0x260>
 85e:	f2 2f       	mov	r31, r18
 860:	f9 7f       	andi	r31, 0xF9	; 249
 862:	bf 2e       	mov	r11, r31
 864:	8f 36       	cpi	r24, 0x6F	; 111
 866:	c1 f0       	breq	.+48     	; 0x898 <vfprintf+0x250>
 868:	18 f4       	brcc	.+6      	; 0x870 <vfprintf+0x228>
 86a:	88 35       	cpi	r24, 0x58	; 88
 86c:	79 f0       	breq	.+30     	; 0x88c <vfprintf+0x244>
 86e:	b4 c0       	rjmp	.+360    	; 0x9d8 <vfprintf+0x390>
 870:	80 37       	cpi	r24, 0x70	; 112
 872:	19 f0       	breq	.+6      	; 0x87a <vfprintf+0x232>
 874:	88 37       	cpi	r24, 0x78	; 120
 876:	21 f0       	breq	.+8      	; 0x880 <vfprintf+0x238>
 878:	af c0       	rjmp	.+350    	; 0x9d8 <vfprintf+0x390>
 87a:	2f 2f       	mov	r18, r31
 87c:	20 61       	ori	r18, 0x10	; 16
 87e:	b2 2e       	mov	r11, r18
 880:	b4 fe       	sbrs	r11, 4
 882:	0d c0       	rjmp	.+26     	; 0x89e <vfprintf+0x256>
 884:	8b 2d       	mov	r24, r11
 886:	84 60       	ori	r24, 0x04	; 4
 888:	b8 2e       	mov	r11, r24
 88a:	09 c0       	rjmp	.+18     	; 0x89e <vfprintf+0x256>
 88c:	24 ff       	sbrs	r18, 4
 88e:	0a c0       	rjmp	.+20     	; 0x8a4 <vfprintf+0x25c>
 890:	9f 2f       	mov	r25, r31
 892:	96 60       	ori	r25, 0x06	; 6
 894:	b9 2e       	mov	r11, r25
 896:	06 c0       	rjmp	.+12     	; 0x8a4 <vfprintf+0x25c>
 898:	28 e0       	ldi	r18, 0x08	; 8
 89a:	30 e0       	ldi	r19, 0x00	; 0
 89c:	05 c0       	rjmp	.+10     	; 0x8a8 <vfprintf+0x260>
 89e:	20 e1       	ldi	r18, 0x10	; 16
 8a0:	30 e0       	ldi	r19, 0x00	; 0
 8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <vfprintf+0x260>
 8a4:	20 e1       	ldi	r18, 0x10	; 16
 8a6:	32 e0       	ldi	r19, 0x02	; 2
 8a8:	f8 01       	movw	r30, r16
 8aa:	b7 fe       	sbrs	r11, 7
 8ac:	07 c0       	rjmp	.+14     	; 0x8bc <vfprintf+0x274>
 8ae:	60 81       	ld	r22, Z
 8b0:	71 81       	ldd	r23, Z+1	; 0x01
 8b2:	82 81       	ldd	r24, Z+2	; 0x02
 8b4:	93 81       	ldd	r25, Z+3	; 0x03
 8b6:	0c 5f       	subi	r16, 0xFC	; 252
 8b8:	1f 4f       	sbci	r17, 0xFF	; 255
 8ba:	06 c0       	rjmp	.+12     	; 0x8c8 <vfprintf+0x280>
 8bc:	60 81       	ld	r22, Z
 8be:	71 81       	ldd	r23, Z+1	; 0x01
 8c0:	80 e0       	ldi	r24, 0x00	; 0
 8c2:	90 e0       	ldi	r25, 0x00	; 0
 8c4:	0e 5f       	subi	r16, 0xFE	; 254
 8c6:	1f 4f       	sbci	r17, 0xFF	; 255
 8c8:	a4 01       	movw	r20, r8
 8ca:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__ultoa_invert>
 8ce:	a8 2e       	mov	r10, r24
 8d0:	a8 18       	sub	r10, r8
 8d2:	fb 2d       	mov	r31, r11
 8d4:	ff 77       	andi	r31, 0x7F	; 127
 8d6:	bf 2e       	mov	r11, r31
 8d8:	b6 fe       	sbrs	r11, 6
 8da:	0b c0       	rjmp	.+22     	; 0x8f2 <vfprintf+0x2aa>
 8dc:	2b 2d       	mov	r18, r11
 8de:	2e 7f       	andi	r18, 0xFE	; 254
 8e0:	a5 14       	cp	r10, r5
 8e2:	50 f4       	brcc	.+20     	; 0x8f8 <vfprintf+0x2b0>
 8e4:	b4 fe       	sbrs	r11, 4
 8e6:	0a c0       	rjmp	.+20     	; 0x8fc <vfprintf+0x2b4>
 8e8:	b2 fc       	sbrc	r11, 2
 8ea:	08 c0       	rjmp	.+16     	; 0x8fc <vfprintf+0x2b4>
 8ec:	2b 2d       	mov	r18, r11
 8ee:	2e 7e       	andi	r18, 0xEE	; 238
 8f0:	05 c0       	rjmp	.+10     	; 0x8fc <vfprintf+0x2b4>
 8f2:	7a 2c       	mov	r7, r10
 8f4:	2b 2d       	mov	r18, r11
 8f6:	03 c0       	rjmp	.+6      	; 0x8fe <vfprintf+0x2b6>
 8f8:	7a 2c       	mov	r7, r10
 8fa:	01 c0       	rjmp	.+2      	; 0x8fe <vfprintf+0x2b6>
 8fc:	75 2c       	mov	r7, r5
 8fe:	24 ff       	sbrs	r18, 4
 900:	0d c0       	rjmp	.+26     	; 0x91c <vfprintf+0x2d4>
 902:	fe 01       	movw	r30, r28
 904:	ea 0d       	add	r30, r10
 906:	f1 1d       	adc	r31, r1
 908:	80 81       	ld	r24, Z
 90a:	80 33       	cpi	r24, 0x30	; 48
 90c:	11 f4       	brne	.+4      	; 0x912 <vfprintf+0x2ca>
 90e:	29 7e       	andi	r18, 0xE9	; 233
 910:	09 c0       	rjmp	.+18     	; 0x924 <vfprintf+0x2dc>
 912:	22 ff       	sbrs	r18, 2
 914:	06 c0       	rjmp	.+12     	; 0x922 <vfprintf+0x2da>
 916:	73 94       	inc	r7
 918:	73 94       	inc	r7
 91a:	04 c0       	rjmp	.+8      	; 0x924 <vfprintf+0x2dc>
 91c:	82 2f       	mov	r24, r18
 91e:	86 78       	andi	r24, 0x86	; 134
 920:	09 f0       	breq	.+2      	; 0x924 <vfprintf+0x2dc>
 922:	73 94       	inc	r7
 924:	23 fd       	sbrc	r18, 3
 926:	13 c0       	rjmp	.+38     	; 0x94e <vfprintf+0x306>
 928:	20 ff       	sbrs	r18, 0
 92a:	06 c0       	rjmp	.+12     	; 0x938 <vfprintf+0x2f0>
 92c:	5a 2c       	mov	r5, r10
 92e:	73 14       	cp	r7, r3
 930:	18 f4       	brcc	.+6      	; 0x938 <vfprintf+0x2f0>
 932:	53 0c       	add	r5, r3
 934:	57 18       	sub	r5, r7
 936:	73 2c       	mov	r7, r3
 938:	73 14       	cp	r7, r3
 93a:	68 f4       	brcc	.+26     	; 0x956 <vfprintf+0x30e>
 93c:	b7 01       	movw	r22, r14
 93e:	80 e2       	ldi	r24, 0x20	; 32
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	2c 87       	std	Y+12, r18	; 0x0c
 944:	0e 94 0c 05 	call	0xa18	; 0xa18 <fputc>
 948:	73 94       	inc	r7
 94a:	2c 85       	ldd	r18, Y+12	; 0x0c
 94c:	f5 cf       	rjmp	.-22     	; 0x938 <vfprintf+0x2f0>
 94e:	73 14       	cp	r7, r3
 950:	10 f4       	brcc	.+4      	; 0x956 <vfprintf+0x30e>
 952:	37 18       	sub	r3, r7
 954:	01 c0       	rjmp	.+2      	; 0x958 <vfprintf+0x310>
 956:	31 2c       	mov	r3, r1
 958:	24 ff       	sbrs	r18, 4
 95a:	12 c0       	rjmp	.+36     	; 0x980 <vfprintf+0x338>
 95c:	b7 01       	movw	r22, r14
 95e:	80 e3       	ldi	r24, 0x30	; 48
 960:	90 e0       	ldi	r25, 0x00	; 0
 962:	2c 87       	std	Y+12, r18	; 0x0c
 964:	0e 94 0c 05 	call	0xa18	; 0xa18 <fputc>
 968:	2c 85       	ldd	r18, Y+12	; 0x0c
 96a:	22 ff       	sbrs	r18, 2
 96c:	17 c0       	rjmp	.+46     	; 0x99c <vfprintf+0x354>
 96e:	21 ff       	sbrs	r18, 1
 970:	03 c0       	rjmp	.+6      	; 0x978 <vfprintf+0x330>
 972:	88 e5       	ldi	r24, 0x58	; 88
 974:	90 e0       	ldi	r25, 0x00	; 0
 976:	02 c0       	rjmp	.+4      	; 0x97c <vfprintf+0x334>
 978:	88 e7       	ldi	r24, 0x78	; 120
 97a:	90 e0       	ldi	r25, 0x00	; 0
 97c:	b7 01       	movw	r22, r14
 97e:	0c c0       	rjmp	.+24     	; 0x998 <vfprintf+0x350>
 980:	82 2f       	mov	r24, r18
 982:	86 78       	andi	r24, 0x86	; 134
 984:	59 f0       	breq	.+22     	; 0x99c <vfprintf+0x354>
 986:	21 fd       	sbrc	r18, 1
 988:	02 c0       	rjmp	.+4      	; 0x98e <vfprintf+0x346>
 98a:	80 e2       	ldi	r24, 0x20	; 32
 98c:	01 c0       	rjmp	.+2      	; 0x990 <vfprintf+0x348>
 98e:	8b e2       	ldi	r24, 0x2B	; 43
 990:	27 fd       	sbrc	r18, 7
 992:	8d e2       	ldi	r24, 0x2D	; 45
 994:	b7 01       	movw	r22, r14
 996:	90 e0       	ldi	r25, 0x00	; 0
 998:	0e 94 0c 05 	call	0xa18	; 0xa18 <fputc>
 99c:	a5 14       	cp	r10, r5
 99e:	38 f4       	brcc	.+14     	; 0x9ae <vfprintf+0x366>
 9a0:	b7 01       	movw	r22, r14
 9a2:	80 e3       	ldi	r24, 0x30	; 48
 9a4:	90 e0       	ldi	r25, 0x00	; 0
 9a6:	0e 94 0c 05 	call	0xa18	; 0xa18 <fputc>
 9aa:	5a 94       	dec	r5
 9ac:	f7 cf       	rjmp	.-18     	; 0x99c <vfprintf+0x354>
 9ae:	aa 94       	dec	r10
 9b0:	f4 01       	movw	r30, r8
 9b2:	ea 0d       	add	r30, r10
 9b4:	f1 1d       	adc	r31, r1
 9b6:	80 81       	ld	r24, Z
 9b8:	b7 01       	movw	r22, r14
 9ba:	90 e0       	ldi	r25, 0x00	; 0
 9bc:	0e 94 0c 05 	call	0xa18	; 0xa18 <fputc>
 9c0:	a1 10       	cpse	r10, r1
 9c2:	f5 cf       	rjmp	.-22     	; 0x9ae <vfprintf+0x366>
 9c4:	33 20       	and	r3, r3
 9c6:	09 f4       	brne	.+2      	; 0x9ca <vfprintf+0x382>
 9c8:	51 ce       	rjmp	.-862    	; 0x66c <vfprintf+0x24>
 9ca:	b7 01       	movw	r22, r14
 9cc:	80 e2       	ldi	r24, 0x20	; 32
 9ce:	90 e0       	ldi	r25, 0x00	; 0
 9d0:	0e 94 0c 05 	call	0xa18	; 0xa18 <fputc>
 9d4:	3a 94       	dec	r3
 9d6:	f6 cf       	rjmp	.-20     	; 0x9c4 <vfprintf+0x37c>
 9d8:	f7 01       	movw	r30, r14
 9da:	86 81       	ldd	r24, Z+6	; 0x06
 9dc:	97 81       	ldd	r25, Z+7	; 0x07
 9de:	02 c0       	rjmp	.+4      	; 0x9e4 <vfprintf+0x39c>
 9e0:	8f ef       	ldi	r24, 0xFF	; 255
 9e2:	9f ef       	ldi	r25, 0xFF	; 255
 9e4:	2c 96       	adiw	r28, 0x0c	; 12
 9e6:	e2 e1       	ldi	r30, 0x12	; 18
 9e8:	0c 94 b8 05 	jmp	0xb70	; 0xb70 <__epilogue_restores__>

000009ec <strnlen_P>:
 9ec:	fc 01       	movw	r30, r24
 9ee:	05 90       	lpm	r0, Z+
 9f0:	61 50       	subi	r22, 0x01	; 1
 9f2:	70 40       	sbci	r23, 0x00	; 0
 9f4:	01 10       	cpse	r0, r1
 9f6:	d8 f7       	brcc	.-10     	; 0x9ee <strnlen_P+0x2>
 9f8:	80 95       	com	r24
 9fa:	90 95       	com	r25
 9fc:	8e 0f       	add	r24, r30
 9fe:	9f 1f       	adc	r25, r31
 a00:	08 95       	ret

00000a02 <strnlen>:
 a02:	fc 01       	movw	r30, r24
 a04:	61 50       	subi	r22, 0x01	; 1
 a06:	70 40       	sbci	r23, 0x00	; 0
 a08:	01 90       	ld	r0, Z+
 a0a:	01 10       	cpse	r0, r1
 a0c:	d8 f7       	brcc	.-10     	; 0xa04 <strnlen+0x2>
 a0e:	80 95       	com	r24
 a10:	90 95       	com	r25
 a12:	8e 0f       	add	r24, r30
 a14:	9f 1f       	adc	r25, r31
 a16:	08 95       	ret

00000a18 <fputc>:
 a18:	0f 93       	push	r16
 a1a:	1f 93       	push	r17
 a1c:	cf 93       	push	r28
 a1e:	df 93       	push	r29
 a20:	18 2f       	mov	r17, r24
 a22:	09 2f       	mov	r16, r25
 a24:	eb 01       	movw	r28, r22
 a26:	8b 81       	ldd	r24, Y+3	; 0x03
 a28:	81 fd       	sbrc	r24, 1
 a2a:	03 c0       	rjmp	.+6      	; 0xa32 <fputc+0x1a>
 a2c:	8f ef       	ldi	r24, 0xFF	; 255
 a2e:	9f ef       	ldi	r25, 0xFF	; 255
 a30:	20 c0       	rjmp	.+64     	; 0xa72 <fputc+0x5a>
 a32:	82 ff       	sbrs	r24, 2
 a34:	10 c0       	rjmp	.+32     	; 0xa56 <fputc+0x3e>
 a36:	4e 81       	ldd	r20, Y+6	; 0x06
 a38:	5f 81       	ldd	r21, Y+7	; 0x07
 a3a:	2c 81       	ldd	r18, Y+4	; 0x04
 a3c:	3d 81       	ldd	r19, Y+5	; 0x05
 a3e:	42 17       	cp	r20, r18
 a40:	53 07       	cpc	r21, r19
 a42:	7c f4       	brge	.+30     	; 0xa62 <fputc+0x4a>
 a44:	e8 81       	ld	r30, Y
 a46:	f9 81       	ldd	r31, Y+1	; 0x01
 a48:	9f 01       	movw	r18, r30
 a4a:	2f 5f       	subi	r18, 0xFF	; 255
 a4c:	3f 4f       	sbci	r19, 0xFF	; 255
 a4e:	39 83       	std	Y+1, r19	; 0x01
 a50:	28 83       	st	Y, r18
 a52:	10 83       	st	Z, r17
 a54:	06 c0       	rjmp	.+12     	; 0xa62 <fputc+0x4a>
 a56:	e8 85       	ldd	r30, Y+8	; 0x08
 a58:	f9 85       	ldd	r31, Y+9	; 0x09
 a5a:	81 2f       	mov	r24, r17
 a5c:	09 95       	icall
 a5e:	89 2b       	or	r24, r25
 a60:	29 f7       	brne	.-54     	; 0xa2c <fputc+0x14>
 a62:	2e 81       	ldd	r18, Y+6	; 0x06
 a64:	3f 81       	ldd	r19, Y+7	; 0x07
 a66:	2f 5f       	subi	r18, 0xFF	; 255
 a68:	3f 4f       	sbci	r19, 0xFF	; 255
 a6a:	3f 83       	std	Y+7, r19	; 0x07
 a6c:	2e 83       	std	Y+6, r18	; 0x06
 a6e:	81 2f       	mov	r24, r17
 a70:	90 2f       	mov	r25, r16
 a72:	df 91       	pop	r29
 a74:	cf 91       	pop	r28
 a76:	1f 91       	pop	r17
 a78:	0f 91       	pop	r16
 a7a:	08 95       	ret

00000a7c <__ultoa_invert>:
 a7c:	fa 01       	movw	r30, r20
 a7e:	aa 27       	eor	r26, r26
 a80:	28 30       	cpi	r18, 0x08	; 8
 a82:	51 f1       	breq	.+84     	; 0xad8 <__ultoa_invert+0x5c>
 a84:	20 31       	cpi	r18, 0x10	; 16
 a86:	81 f1       	breq	.+96     	; 0xae8 <__ultoa_invert+0x6c>
 a88:	e8 94       	clt
 a8a:	6f 93       	push	r22
 a8c:	6e 7f       	andi	r22, 0xFE	; 254
 a8e:	6e 5f       	subi	r22, 0xFE	; 254
 a90:	7f 4f       	sbci	r23, 0xFF	; 255
 a92:	8f 4f       	sbci	r24, 0xFF	; 255
 a94:	9f 4f       	sbci	r25, 0xFF	; 255
 a96:	af 4f       	sbci	r26, 0xFF	; 255
 a98:	b1 e0       	ldi	r27, 0x01	; 1
 a9a:	3e d0       	rcall	.+124    	; 0xb18 <__ultoa_invert+0x9c>
 a9c:	b4 e0       	ldi	r27, 0x04	; 4
 a9e:	3c d0       	rcall	.+120    	; 0xb18 <__ultoa_invert+0x9c>
 aa0:	67 0f       	add	r22, r23
 aa2:	78 1f       	adc	r23, r24
 aa4:	89 1f       	adc	r24, r25
 aa6:	9a 1f       	adc	r25, r26
 aa8:	a1 1d       	adc	r26, r1
 aaa:	68 0f       	add	r22, r24
 aac:	79 1f       	adc	r23, r25
 aae:	8a 1f       	adc	r24, r26
 ab0:	91 1d       	adc	r25, r1
 ab2:	a1 1d       	adc	r26, r1
 ab4:	6a 0f       	add	r22, r26
 ab6:	71 1d       	adc	r23, r1
 ab8:	81 1d       	adc	r24, r1
 aba:	91 1d       	adc	r25, r1
 abc:	a1 1d       	adc	r26, r1
 abe:	20 d0       	rcall	.+64     	; 0xb00 <__ultoa_invert+0x84>
 ac0:	09 f4       	brne	.+2      	; 0xac4 <__ultoa_invert+0x48>
 ac2:	68 94       	set
 ac4:	3f 91       	pop	r19
 ac6:	2a e0       	ldi	r18, 0x0A	; 10
 ac8:	26 9f       	mul	r18, r22
 aca:	11 24       	eor	r1, r1
 acc:	30 19       	sub	r19, r0
 ace:	30 5d       	subi	r19, 0xD0	; 208
 ad0:	31 93       	st	Z+, r19
 ad2:	de f6       	brtc	.-74     	; 0xa8a <__ultoa_invert+0xe>
 ad4:	cf 01       	movw	r24, r30
 ad6:	08 95       	ret
 ad8:	46 2f       	mov	r20, r22
 ada:	47 70       	andi	r20, 0x07	; 7
 adc:	40 5d       	subi	r20, 0xD0	; 208
 ade:	41 93       	st	Z+, r20
 ae0:	b3 e0       	ldi	r27, 0x03	; 3
 ae2:	0f d0       	rcall	.+30     	; 0xb02 <__ultoa_invert+0x86>
 ae4:	c9 f7       	brne	.-14     	; 0xad8 <__ultoa_invert+0x5c>
 ae6:	f6 cf       	rjmp	.-20     	; 0xad4 <__ultoa_invert+0x58>
 ae8:	46 2f       	mov	r20, r22
 aea:	4f 70       	andi	r20, 0x0F	; 15
 aec:	40 5d       	subi	r20, 0xD0	; 208
 aee:	4a 33       	cpi	r20, 0x3A	; 58
 af0:	18 f0       	brcs	.+6      	; 0xaf8 <__ultoa_invert+0x7c>
 af2:	49 5d       	subi	r20, 0xD9	; 217
 af4:	31 fd       	sbrc	r19, 1
 af6:	40 52       	subi	r20, 0x20	; 32
 af8:	41 93       	st	Z+, r20
 afa:	02 d0       	rcall	.+4      	; 0xb00 <__ultoa_invert+0x84>
 afc:	a9 f7       	brne	.-22     	; 0xae8 <__ultoa_invert+0x6c>
 afe:	ea cf       	rjmp	.-44     	; 0xad4 <__ultoa_invert+0x58>
 b00:	b4 e0       	ldi	r27, 0x04	; 4
 b02:	a6 95       	lsr	r26
 b04:	97 95       	ror	r25
 b06:	87 95       	ror	r24
 b08:	77 95       	ror	r23
 b0a:	67 95       	ror	r22
 b0c:	ba 95       	dec	r27
 b0e:	c9 f7       	brne	.-14     	; 0xb02 <__ultoa_invert+0x86>
 b10:	00 97       	sbiw	r24, 0x00	; 0
 b12:	61 05       	cpc	r22, r1
 b14:	71 05       	cpc	r23, r1
 b16:	08 95       	ret
 b18:	9b 01       	movw	r18, r22
 b1a:	ac 01       	movw	r20, r24
 b1c:	0a 2e       	mov	r0, r26
 b1e:	06 94       	lsr	r0
 b20:	57 95       	ror	r21
 b22:	47 95       	ror	r20
 b24:	37 95       	ror	r19
 b26:	27 95       	ror	r18
 b28:	ba 95       	dec	r27
 b2a:	c9 f7       	brne	.-14     	; 0xb1e <__ultoa_invert+0xa2>
 b2c:	62 0f       	add	r22, r18
 b2e:	73 1f       	adc	r23, r19
 b30:	84 1f       	adc	r24, r20
 b32:	95 1f       	adc	r25, r21
 b34:	a0 1d       	adc	r26, r0
 b36:	08 95       	ret

00000b38 <__prologue_saves__>:
 b38:	2f 92       	push	r2
 b3a:	3f 92       	push	r3
 b3c:	4f 92       	push	r4
 b3e:	5f 92       	push	r5
 b40:	6f 92       	push	r6
 b42:	7f 92       	push	r7
 b44:	8f 92       	push	r8
 b46:	9f 92       	push	r9
 b48:	af 92       	push	r10
 b4a:	bf 92       	push	r11
 b4c:	cf 92       	push	r12
 b4e:	df 92       	push	r13
 b50:	ef 92       	push	r14
 b52:	ff 92       	push	r15
 b54:	0f 93       	push	r16
 b56:	1f 93       	push	r17
 b58:	cf 93       	push	r28
 b5a:	df 93       	push	r29
 b5c:	cd b7       	in	r28, 0x3d	; 61
 b5e:	de b7       	in	r29, 0x3e	; 62
 b60:	ca 1b       	sub	r28, r26
 b62:	db 0b       	sbc	r29, r27
 b64:	0f b6       	in	r0, 0x3f	; 63
 b66:	f8 94       	cli
 b68:	de bf       	out	0x3e, r29	; 62
 b6a:	0f be       	out	0x3f, r0	; 63
 b6c:	cd bf       	out	0x3d, r28	; 61
 b6e:	09 94       	ijmp

00000b70 <__epilogue_restores__>:
 b70:	2a 88       	ldd	r2, Y+18	; 0x12
 b72:	39 88       	ldd	r3, Y+17	; 0x11
 b74:	48 88       	ldd	r4, Y+16	; 0x10
 b76:	5f 84       	ldd	r5, Y+15	; 0x0f
 b78:	6e 84       	ldd	r6, Y+14	; 0x0e
 b7a:	7d 84       	ldd	r7, Y+13	; 0x0d
 b7c:	8c 84       	ldd	r8, Y+12	; 0x0c
 b7e:	9b 84       	ldd	r9, Y+11	; 0x0b
 b80:	aa 84       	ldd	r10, Y+10	; 0x0a
 b82:	b9 84       	ldd	r11, Y+9	; 0x09
 b84:	c8 84       	ldd	r12, Y+8	; 0x08
 b86:	df 80       	ldd	r13, Y+7	; 0x07
 b88:	ee 80       	ldd	r14, Y+6	; 0x06
 b8a:	fd 80       	ldd	r15, Y+5	; 0x05
 b8c:	0c 81       	ldd	r16, Y+4	; 0x04
 b8e:	1b 81       	ldd	r17, Y+3	; 0x03
 b90:	aa 81       	ldd	r26, Y+2	; 0x02
 b92:	b9 81       	ldd	r27, Y+1	; 0x01
 b94:	ce 0f       	add	r28, r30
 b96:	d1 1d       	adc	r29, r1
 b98:	0f b6       	in	r0, 0x3f	; 63
 b9a:	f8 94       	cli
 b9c:	de bf       	out	0x3e, r29	; 62
 b9e:	0f be       	out	0x3f, r0	; 63
 ba0:	cd bf       	out	0x3d, r28	; 61
 ba2:	ed 01       	movw	r28, r26
 ba4:	08 95       	ret

00000ba6 <_exit>:
 ba6:	f8 94       	cli

00000ba8 <__stop_program>:
 ba8:	ff cf       	rjmp	.-2      	; 0xba8 <__stop_program>
