
clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000bea  00000c7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000021  0080006a  0080006a  00000c88  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c88  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000812  00000000  00000000  00000d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000030a  00000000  00000000  000015ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c7  00000000  00000000  000018b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000234  00000000  00000000  00001c80  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000335  00000000  00000000  00001eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007f2  00000000  00000000  000021e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f0  00000000  00000000  000029db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 b3 01 	jmp	0x366	; 0x366 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	ce 00       	.word	0x00ce	; ????
  56:	e2 00       	.word	0x00e2	; ????
  58:	d0 00       	.word	0x00d0	; ????
  5a:	d2 00       	.word	0x00d2	; ????
  5c:	d4 00       	.word	0x00d4	; ????
  5e:	d6 00       	.word	0x00d6	; ????
  60:	d8 00       	.word	0x00d8	; ????
  62:	da 00       	.word	0x00da	; ????
  64:	dc 00       	.word	0x00dc	; ????
  66:	de 00       	.word	0x00de	; ????

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf e5       	ldi	r28, 0x5F	; 95
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	10 e0       	ldi	r17, 0x00	; 0
  76:	a0 e6       	ldi	r26, 0x60	; 96
  78:	b0 e0       	ldi	r27, 0x00	; 0
  7a:	ea ee       	ldi	r30, 0xEA	; 234
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 36       	cpi	r26, 0x6A	; 106
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	20 e0       	ldi	r18, 0x00	; 0
  8c:	aa e6       	ldi	r26, 0x6A	; 106
  8e:	b0 e0       	ldi	r27, 0x00	; 0
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 38       	cpi	r26, 0x8B	; 139
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 5d 02 	call	0x4ba	; 0x4ba <main>
  9e:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_9>:
ISR(TIMER0_OVF_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	4f 93       	push	r20
  b6:	5f 93       	push	r21
  b8:	6f 93       	push	r22
  ba:	7f 93       	push	r23
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
  c0:	af 93       	push	r26
  c2:	bf 93       	push	r27
  c4:	ef 93       	push	r30
  c6:	ff 93       	push	r31
	static volatile int src_nr = 0, counter = 0;
	
	if(counter++ == 10)
  c8:	80 91 72 00 	lds	r24, 0x0072
  cc:	90 91 73 00 	lds	r25, 0x0073
  d0:	9c 01       	movw	r18, r24
  d2:	2f 5f       	subi	r18, 0xFF	; 255
  d4:	3f 4f       	sbci	r19, 0xFF	; 255
  d6:	30 93 73 00 	sts	0x0073, r19
  da:	20 93 72 00 	sts	0x0072, r18
  de:	0a 97       	sbiw	r24, 0x0a	; 10
  e0:	89 f5       	brne	.+98     	; 0x144 <__vector_9+0x9e>
	{
		src_nr = (src_nr + 1) % total_displays;
  e2:	80 91 70 00 	lds	r24, 0x0070
  e6:	90 91 71 00 	lds	r25, 0x0071
  ea:	01 96       	adiw	r24, 0x01	; 1
  ec:	60 91 88 00 	lds	r22, 0x0088
  f0:	70 e0       	ldi	r23, 0x00	; 0
  f2:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <__divmodhi4>
  f6:	90 93 71 00 	sts	0x0071, r25
  fa:	80 93 70 00 	sts	0x0070, r24
		
		*display_port = ~(1 << src_nr);
  fe:	e0 91 7a 00 	lds	r30, 0x007A
 102:	f0 91 7b 00 	lds	r31, 0x007B
 106:	80 91 70 00 	lds	r24, 0x0070
 10a:	90 91 71 00 	lds	r25, 0x0071
 10e:	21 e0       	ldi	r18, 0x01	; 1
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	a9 01       	movw	r20, r18
 114:	02 c0       	rjmp	.+4      	; 0x11a <__vector_9+0x74>
 116:	44 0f       	add	r20, r20
 118:	55 1f       	adc	r21, r21
 11a:	8a 95       	dec	r24
 11c:	e2 f7       	brpl	.-8      	; 0x116 <__vector_9+0x70>
 11e:	ca 01       	movw	r24, r20
 120:	80 95       	com	r24
 122:	80 83       	st	Z, r24
		*digit_port = number[src_nr];
 124:	e0 91 84 00 	lds	r30, 0x0084
 128:	f0 91 85 00 	lds	r31, 0x0085
 12c:	a0 91 70 00 	lds	r26, 0x0070
 130:	b0 91 71 00 	lds	r27, 0x0071
 134:	a4 58       	subi	r26, 0x84	; 132
 136:	bf 4f       	sbci	r27, 0xFF	; 255
 138:	8c 91       	ld	r24, X
 13a:	80 83       	st	Z, r24
	
		counter = 0;
 13c:	10 92 73 00 	sts	0x0073, r1
 140:	10 92 72 00 	sts	0x0072, r1
	}
}
 144:	ff 91       	pop	r31
 146:	ef 91       	pop	r30
 148:	bf 91       	pop	r27
 14a:	af 91       	pop	r26
 14c:	9f 91       	pop	r25
 14e:	8f 91       	pop	r24
 150:	7f 91       	pop	r23
 152:	6f 91       	pop	r22
 154:	5f 91       	pop	r21
 156:	4f 91       	pop	r20
 158:	3f 91       	pop	r19
 15a:	2f 91       	pop	r18
 15c:	0f 90       	pop	r0
 15e:	0f be       	out	0x3f, r0	; 63
 160:	0f 90       	pop	r0
 162:	1f 90       	pop	r1
 164:	18 95       	reti

00000166 <clearDisplay>:

void clearDisplay()
{
	int i;
	
	for(i = 0; i < total_displays; i++)
 166:	20 91 88 00 	lds	r18, 0x0088
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	12 16       	cp	r1, r18
 16e:	13 06       	cpc	r1, r19
 170:	54 f4       	brge	.+20     	; 0x186 <clearDisplay+0x20>
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	90 e0       	ldi	r25, 0x00	; 0
		number[i] = 0;
 176:	fc 01       	movw	r30, r24
 178:	e4 58       	subi	r30, 0x84	; 132
 17a:	ff 4f       	sbci	r31, 0xFF	; 255
 17c:	10 82       	st	Z, r1

void clearDisplay()
{
	int i;
	
	for(i = 0; i < total_displays; i++)
 17e:	01 96       	adiw	r24, 0x01	; 1
 180:	82 17       	cp	r24, r18
 182:	93 07       	cpc	r25, r19
 184:	c4 f3       	brlt	.-16     	; 0x176 <clearDisplay+0x10>
 186:	08 95       	ret

00000188 <convertChar>:

uint8_t convertChar(char s)
{
	uint8_t result = 0;
	
	switch(s)
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	fc 01       	movw	r30, r24
 18c:	f0 97       	sbiw	r30, 0x30	; 48
 18e:	ea 30       	cpi	r30, 0x0A	; 10
 190:	f1 05       	cpc	r31, r1
 192:	b0 f4       	brcc	.+44     	; 0x1c0 <convertChar+0x38>
 194:	e6 5d       	subi	r30, 0xD6	; 214
 196:	ff 4f       	sbci	r31, 0xFF	; 255
 198:	0c 94 08 03 	jmp	0x610	; 0x610 <__tablejump2__>
	{
		case '0':
			result = 0b00111111;
 19c:	8f e3       	ldi	r24, 0x3F	; 63
 19e:	08 95       	ret
		case '1':
			result = 0b00000110;
			break;
		
		case '2':
			result = 0b01011011;
 1a0:	8b e5       	ldi	r24, 0x5B	; 91
			break;
 1a2:	08 95       	ret
		
		case '3':
			result = 0b01001111;
 1a4:	8f e4       	ldi	r24, 0x4F	; 79
			break;
 1a6:	08 95       	ret
		
		case '4':
			result = 0b01100110;
 1a8:	86 e6       	ldi	r24, 0x66	; 102
			break;
 1aa:	08 95       	ret
		
		case '5':
			result = 0b01101101;
 1ac:	8d e6       	ldi	r24, 0x6D	; 109
			break;
 1ae:	08 95       	ret
		
		case '6':
			result = 0b01111101;
 1b0:	8d e7       	ldi	r24, 0x7D	; 125
			break;
 1b2:	08 95       	ret
		
		case '7':
			result = 0b00000111;
 1b4:	87 e0       	ldi	r24, 0x07	; 7
			break;
 1b6:	08 95       	ret
		
		case '8':
			result = 0b01111111;
 1b8:	8f e7       	ldi	r24, 0x7F	; 127
			break;
 1ba:	08 95       	ret
		
		case '9':
			result = 0b01101111;
 1bc:	8f e6       	ldi	r24, 0x6F	; 111
			break;
 1be:	08 95       	ret
			
		default:
			result = 0;
 1c0:	80 e0       	ldi	r24, 0x00	; 0
			break;
 1c2:	08 95       	ret
		case '0':
			result = 0b00111111;
			break;
		
		case '1':
			result = 0b00000110;
 1c4:	86 e0       	ldi	r24, 0x06	; 6
			result = 0;
			break;
	}
	
	return result;
}
 1c6:	08 95       	ret

000001c8 <LEDSetValue>:
	position = 0;
	set_timer0();
}

void LEDSetValue(char *val)
{
 1c8:	af 92       	push	r10
 1ca:	bf 92       	push	r11
 1cc:	cf 92       	push	r12
 1ce:	df 92       	push	r13
 1d0:	ef 92       	push	r14
 1d2:	ff 92       	push	r15
 1d4:	0f 93       	push	r16
 1d6:	1f 93       	push	r17
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
	int i;
	
	for(i = 0; i < total_displays; i++)
 1dc:	00 91 88 00 	lds	r16, 0x0088
 1e0:	10 e0       	ldi	r17, 0x00	; 0
 1e2:	10 16       	cp	r1, r16
 1e4:	11 06       	cpc	r1, r17
 1e6:	2c f5       	brge	.+74     	; 0x232 <LEDSetValue+0x6a>
	{
		if(val[i] == '\0')
 1e8:	fc 01       	movw	r30, r24
 1ea:	20 81       	ld	r18, Z
 1ec:	22 23       	and	r18, r18
 1ee:	09 f1       	breq	.+66     	; 0x232 <LEDSetValue+0x6a>
			break;
		
		number[(i + position) % total_displays] = convertChar(val[i]);
 1f0:	a0 90 79 00 	lds	r10, 0x0079
 1f4:	6c 01       	movw	r12, r24
 1f6:	ff ef       	ldi	r31, 0xFF	; 255
 1f8:	cf 1a       	sub	r12, r31
 1fa:	df 0a       	sbc	r13, r31

void LEDSetValue(char *val)
{
	int i;
	
	for(i = 0; i < total_displays; i++)
 1fc:	c0 e0       	ldi	r28, 0x00	; 0
 1fe:	d0 e0       	ldi	r29, 0x00	; 0
 200:	b1 2c       	mov	r11, r1
 202:	05 c0       	rjmp	.+10     	; 0x20e <LEDSetValue+0x46>
	{
		if(val[i] == '\0')
 204:	f6 01       	movw	r30, r12
 206:	21 91       	ld	r18, Z+
 208:	6f 01       	movw	r12, r30
 20a:	22 23       	and	r18, r18
 20c:	91 f0       	breq	.+36     	; 0x232 <LEDSetValue+0x6a>
 20e:	ce 01       	movw	r24, r28
 210:	8a 0d       	add	r24, r10
 212:	9b 1d       	adc	r25, r11
			break;
		
		number[(i + position) % total_displays] = convertChar(val[i]);
 214:	b8 01       	movw	r22, r16
 216:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <__divmodhi4>
 21a:	7c 01       	movw	r14, r24
 21c:	82 2f       	mov	r24, r18
 21e:	0e 94 c4 00 	call	0x188	; 0x188 <convertChar>
 222:	f7 01       	movw	r30, r14
 224:	e4 58       	subi	r30, 0x84	; 132
 226:	ff 4f       	sbci	r31, 0xFF	; 255
 228:	80 83       	st	Z, r24

void LEDSetValue(char *val)
{
	int i;
	
	for(i = 0; i < total_displays; i++)
 22a:	21 96       	adiw	r28, 0x01	; 1
 22c:	c0 17       	cp	r28, r16
 22e:	d1 07       	cpc	r29, r17
 230:	4c f3       	brlt	.-46     	; 0x204 <LEDSetValue+0x3c>
		if(val[i] == '\0')
			break;
		
		number[(i + position) % total_displays] = convertChar(val[i]);
	}
}
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	1f 91       	pop	r17
 238:	0f 91       	pop	r16
 23a:	ff 90       	pop	r15
 23c:	ef 90       	pop	r14
 23e:	df 90       	pop	r13
 240:	cf 90       	pop	r12
 242:	bf 90       	pop	r11
 244:	af 90       	pop	r10
 246:	08 95       	ret

00000248 <LEDSetNumberWithZero>:
	sprintf(s, "%d\0", nr);
	LEDSetValue(s);
}

void LEDSetNumberWithZero(int nr)
{
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
 24c:	cd b7       	in	r28, 0x3d	; 61
 24e:	de b7       	in	r29, 0x3e	; 62
 250:	29 97       	sbiw	r28, 0x09	; 9
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	f8 94       	cli
 256:	de bf       	out	0x3e, r29	; 62
 258:	0f be       	out	0x3f, r0	; 63
 25a:	cd bf       	out	0x3d, r28	; 61
	char s[MAX_NUM_DISPLAY + 1]; // +1 end char
	
	if(nr < 10)
 25c:	8a 30       	cpi	r24, 0x0A	; 10
 25e:	91 05       	cpc	r25, r1
 260:	9c f4       	brge	.+38     	; 0x288 <LEDSetNumberWithZero+0x40>
		sprintf(s, "0%d\0", nr);
 262:	9f 93       	push	r25
 264:	8f 93       	push	r24
 266:	84 e6       	ldi	r24, 0x64	; 100
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	9f 93       	push	r25
 26c:	8f 93       	push	r24
 26e:	ce 01       	movw	r24, r28
 270:	01 96       	adiw	r24, 0x01	; 1
 272:	9f 93       	push	r25
 274:	8f 93       	push	r24
 276:	0e 94 22 03 	call	0x644	; 0x644 <sprintf>
 27a:	0f 90       	pop	r0
 27c:	0f 90       	pop	r0
 27e:	0f 90       	pop	r0
 280:	0f 90       	pop	r0
 282:	0f 90       	pop	r0
 284:	0f 90       	pop	r0
 286:	12 c0       	rjmp	.+36     	; 0x2ac <LEDSetNumberWithZero+0x64>
	else
		sprintf(s, "%d\0", nr);
 288:	9f 93       	push	r25
 28a:	8f 93       	push	r24
 28c:	80 e6       	ldi	r24, 0x60	; 96
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	9f 93       	push	r25
 292:	8f 93       	push	r24
 294:	ce 01       	movw	r24, r28
 296:	01 96       	adiw	r24, 0x01	; 1
 298:	9f 93       	push	r25
 29a:	8f 93       	push	r24
 29c:	0e 94 22 03 	call	0x644	; 0x644 <sprintf>
 2a0:	0f 90       	pop	r0
 2a2:	0f 90       	pop	r0
 2a4:	0f 90       	pop	r0
 2a6:	0f 90       	pop	r0
 2a8:	0f 90       	pop	r0
 2aa:	0f 90       	pop	r0
	
	LEDSetValue(s);
 2ac:	ce 01       	movw	r24, r28
 2ae:	01 96       	adiw	r24, 0x01	; 1
 2b0:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LEDSetValue>
}
 2b4:	29 96       	adiw	r28, 0x09	; 9
 2b6:	0f b6       	in	r0, 0x3f	; 63
 2b8:	f8 94       	cli
 2ba:	de bf       	out	0x3e, r29	; 62
 2bc:	0f be       	out	0x3f, r0	; 63
 2be:	cd bf       	out	0x3d, r28	; 61
 2c0:	df 91       	pop	r29
 2c2:	cf 91       	pop	r28
 2c4:	08 95       	ret

000002c6 <set_timer0>:
	return result;
}

void set_timer0()
{
	TCCR0 = 1 << CS01;
 2c6:	82 e0       	ldi	r24, 0x02	; 2
 2c8:	83 bf       	out	0x33, r24	; 51
	TIMSK |= 1 << TOIE0;
 2ca:	89 b7       	in	r24, 0x39	; 57
 2cc:	81 60       	ori	r24, 0x01	; 1
 2ce:	89 bf       	out	0x39, r24	; 57
 2d0:	08 95       	ret

000002d2 <LEDInit>:
		counter = 0;
	}
}

void LEDInit(uint8_t total, volatile uint8_t *digit_ddr_wsk, volatile uint8_t *digit_port_wsk, volatile uint8_t *display_ddr_wsk, volatile uint8_t *display_port_wsk)
{
 2d2:	0f 93       	push	r16
 2d4:	1f 93       	push	r17
	total_displays = total;
 2d6:	80 93 88 00 	sts	0x0088, r24
	digit_ddr = digit_ddr_wsk;
 2da:	70 93 8a 00 	sts	0x008A, r23
 2de:	60 93 89 00 	sts	0x0089, r22
	digit_port = digit_port_wsk;
 2e2:	50 93 85 00 	sts	0x0085, r21
 2e6:	40 93 84 00 	sts	0x0084, r20
	display_ddr = display_ddr_wsk;
 2ea:	30 93 87 00 	sts	0x0087, r19
 2ee:	20 93 86 00 	sts	0x0086, r18
	display_port = display_port_wsk;
 2f2:	10 93 7b 00 	sts	0x007B, r17
 2f6:	00 93 7a 00 	sts	0x007A, r16
	
	*digit_ddr = 0xFF;
 2fa:	8f ef       	ldi	r24, 0xFF	; 255
 2fc:	fb 01       	movw	r30, r22
 2fe:	80 83       	st	Z, r24
	*digit_port = 0;
 300:	e0 91 84 00 	lds	r30, 0x0084
 304:	f0 91 85 00 	lds	r31, 0x0085
 308:	10 82       	st	Z, r1
	*display_ddr = 0;
 30a:	e0 91 86 00 	lds	r30, 0x0086
 30e:	f0 91 87 00 	lds	r31, 0x0087
 312:	10 82       	st	Z, r1
	*display_port = 0xFF;
 314:	e0 91 7a 00 	lds	r30, 0x007A
 318:	f0 91 7b 00 	lds	r31, 0x007B
 31c:	80 83       	st	Z, r24
	
	int i;
	for(i = 0; i < total_displays; i++)
 31e:	80 91 88 00 	lds	r24, 0x0088
 322:	88 23       	and	r24, r24
 324:	c9 f0       	breq	.+50     	; 0x358 <LEDInit+0x86>
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	90 e0       	ldi	r25, 0x00	; 0
	{
		*display_ddr |= (1 << i);
 32a:	41 e0       	ldi	r20, 0x01	; 1
 32c:	50 e0       	ldi	r21, 0x00	; 0
 32e:	e0 91 86 00 	lds	r30, 0x0086
 332:	f0 91 87 00 	lds	r31, 0x0087
 336:	60 81       	ld	r22, Z
 338:	9a 01       	movw	r18, r20
 33a:	08 2e       	mov	r0, r24
 33c:	02 c0       	rjmp	.+4      	; 0x342 <LEDInit+0x70>
 33e:	22 0f       	add	r18, r18
 340:	33 1f       	adc	r19, r19
 342:	0a 94       	dec	r0
 344:	e2 f7       	brpl	.-8      	; 0x33e <LEDInit+0x6c>
 346:	26 2b       	or	r18, r22
 348:	20 83       	st	Z, r18
	*digit_port = 0;
	*display_ddr = 0;
	*display_port = 0xFF;
	
	int i;
	for(i = 0; i < total_displays; i++)
 34a:	01 96       	adiw	r24, 0x01	; 1
 34c:	20 91 88 00 	lds	r18, 0x0088
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	82 17       	cp	r24, r18
 354:	93 07       	cpc	r25, r19
 356:	5c f3       	brlt	.-42     	; 0x32e <LEDInit+0x5c>
	{
		*display_ddr |= (1 << i);
	}
	
	position = 0;
 358:	10 92 79 00 	sts	0x0079, r1
	set_timer0();
 35c:	0e 94 63 01 	call	0x2c6	; 0x2c6 <set_timer0>
}
 360:	1f 91       	pop	r17
 362:	0f 91       	pop	r16
 364:	08 95       	ret

00000366 <__vector_4>:
ISR(TIMER2_OVF_vect)
{
 366:	1f 92       	push	r1
 368:	0f 92       	push	r0
 36a:	0f b6       	in	r0, 0x3f	; 63
 36c:	0f 92       	push	r0
 36e:	11 24       	eor	r1, r1
 370:	8f 93       	push	r24
 372:	9f 93       	push	r25
 374:	af 93       	push	r26
 376:	bf 93       	push	r27
	TCCR2 = (1 << CS22) | (1 << CS20);
 378:	85 e0       	ldi	r24, 0x05	; 5
 37a:	85 bd       	out	0x25, r24	; 37
	
	if(CLOCKStatus & (1 << REVERSE_CLOCK))
 37c:	80 91 74 00 	lds	r24, 0x0074
 380:	82 ff       	sbrs	r24, 2
 382:	20 c0       	rjmp	.+64     	; 0x3c4 <__vector_4+0x5e>
	{
		if(CLOCKTime > 0)
 384:	80 91 75 00 	lds	r24, 0x0075
 388:	90 91 76 00 	lds	r25, 0x0076
 38c:	a0 91 77 00 	lds	r26, 0x0077
 390:	b0 91 78 00 	lds	r27, 0x0078
 394:	89 2b       	or	r24, r25
 396:	8a 2b       	or	r24, r26
 398:	8b 2b       	or	r24, r27
 39a:	39 f1       	breq	.+78     	; 0x3ea <__vector_4+0x84>
			CLOCKTime -= 1;
 39c:	80 91 75 00 	lds	r24, 0x0075
 3a0:	90 91 76 00 	lds	r25, 0x0076
 3a4:	a0 91 77 00 	lds	r26, 0x0077
 3a8:	b0 91 78 00 	lds	r27, 0x0078
 3ac:	01 97       	sbiw	r24, 0x01	; 1
 3ae:	a1 09       	sbc	r26, r1
 3b0:	b1 09       	sbc	r27, r1
 3b2:	80 93 75 00 	sts	0x0075, r24
 3b6:	90 93 76 00 	sts	0x0076, r25
 3ba:	a0 93 77 00 	sts	0x0077, r26
 3be:	b0 93 78 00 	sts	0x0078, r27
 3c2:	13 c0       	rjmp	.+38     	; 0x3ea <__vector_4+0x84>
	}
	else
		CLOCKTime = (CLOCKTime + 1);
 3c4:	80 91 75 00 	lds	r24, 0x0075
 3c8:	90 91 76 00 	lds	r25, 0x0076
 3cc:	a0 91 77 00 	lds	r26, 0x0077
 3d0:	b0 91 78 00 	lds	r27, 0x0078
 3d4:	01 96       	adiw	r24, 0x01	; 1
 3d6:	a1 1d       	adc	r26, r1
 3d8:	b1 1d       	adc	r27, r1
 3da:	80 93 75 00 	sts	0x0075, r24
 3de:	90 93 76 00 	sts	0x0076, r25
 3e2:	a0 93 77 00 	sts	0x0077, r26
 3e6:	b0 93 78 00 	sts	0x0078, r27
	
	CLOCKStatus |= (1 << CHANGE_STATUS);
 3ea:	80 91 74 00 	lds	r24, 0x0074
 3ee:	81 60       	ori	r24, 0x01	; 1
 3f0:	80 93 74 00 	sts	0x0074, r24
}
 3f4:	bf 91       	pop	r27
 3f6:	af 91       	pop	r26
 3f8:	9f 91       	pop	r25
 3fa:	8f 91       	pop	r24
 3fc:	0f 90       	pop	r0
 3fe:	0f be       	out	0x3f, r0	; 63
 400:	0f 90       	pop	r0
 402:	1f 90       	pop	r1
 404:	18 95       	reti

00000406 <getTime>:
{
	return (int)CLOCKTime / HOUR_SECONDS;
}

int * getTime()
{
 406:	0f 93       	push	r16
 408:	1f 93       	push	r17
	static int time[3]; // [0] -> h, [1] -> m, [2] -> s
	uint32_t tmpTime = CLOCKTime;
 40a:	00 91 75 00 	lds	r16, 0x0075
 40e:	10 91 76 00 	lds	r17, 0x0076
 412:	20 91 77 00 	lds	r18, 0x0077
 416:	30 91 78 00 	lds	r19, 0x0078
	return (int)CLOCKTime / MINUTE_SECONDS;
}

int getHours()
{
	return (int)CLOCKTime / HOUR_SECONDS;
 41a:	80 91 75 00 	lds	r24, 0x0075
 41e:	90 91 76 00 	lds	r25, 0x0076
 422:	a0 91 77 00 	lds	r26, 0x0077
 426:	b0 91 78 00 	lds	r27, 0x0078
 42a:	60 e1       	ldi	r22, 0x10	; 16
 42c:	7e e0       	ldi	r23, 0x0E	; 14
 42e:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <__divmodhi4>
int * getTime()
{
	static int time[3]; // [0] -> h, [1] -> m, [2] -> s
	uint32_t tmpTime = CLOCKTime;
	
	time[0] = getHours(),					tmpTime %= HOUR_SECONDS;
 432:	70 93 6b 00 	sts	0x006B, r23
 436:	60 93 6a 00 	sts	0x006A, r22
 43a:	c9 01       	movw	r24, r18
 43c:	b8 01       	movw	r22, r16
 43e:	20 e1       	ldi	r18, 0x10	; 16
 440:	3e e0       	ldi	r19, 0x0E	; 14
 442:	40 e0       	ldi	r20, 0x00	; 0
 444:	50 e0       	ldi	r21, 0x00	; 0
 446:	0e 94 e6 02 	call	0x5cc	; 0x5cc <__udivmodsi4>
	time[1] = tmpTime / MINUTE_SECONDS,		tmpTime %= MINUTE_SECONDS;
 44a:	2c e3       	ldi	r18, 0x3C	; 60
 44c:	30 e0       	ldi	r19, 0x00	; 0
 44e:	40 e0       	ldi	r20, 0x00	; 0
 450:	50 e0       	ldi	r21, 0x00	; 0
 452:	0e 94 e6 02 	call	0x5cc	; 0x5cc <__udivmodsi4>
 456:	30 93 6d 00 	sts	0x006D, r19
 45a:	20 93 6c 00 	sts	0x006C, r18
	time[2] = tmpTime;
 45e:	70 93 6f 00 	sts	0x006F, r23
 462:	60 93 6e 00 	sts	0x006E, r22
	
	return time;
}
 466:	8a e6       	ldi	r24, 0x6A	; 106
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	1f 91       	pop	r17
 46c:	0f 91       	pop	r16
 46e:	08 95       	ret

00000470 <CLOCKStart>:
	CLOCKTime = 0;
}

void CLOCKStart()
{
	CLOCKStatus |= (1 << ACTIVE_STATUS);
 470:	80 91 74 00 	lds	r24, 0x0074
 474:	82 60       	ori	r24, 0x02	; 2
 476:	80 93 74 00 	sts	0x0074, r24
	TIMSK |= (1 << TOIE2);
 47a:	89 b7       	in	r24, 0x39	; 57
 47c:	80 64       	ori	r24, 0x40	; 64
 47e:	89 bf       	out	0x39, r24	; 57
 480:	08 95       	ret

00000482 <CLOCKStop>:
}

void CLOCKStop()
{
	CLOCKStatus &= ~(1 << ACTIVE_STATUS);
 482:	80 91 74 00 	lds	r24, 0x0074
 486:	8d 7f       	andi	r24, 0xFD	; 253
 488:	80 93 74 00 	sts	0x0074, r24
	TIMSK &= ~(1 << TOIE2);
 48c:	89 b7       	in	r24, 0x39	; 57
 48e:	8f 7b       	andi	r24, 0xBF	; 191
 490:	89 bf       	out	0x39, r24	; 57
 492:	08 95       	ret

00000494 <CLOCKIsActive>:
}

int CLOCKIsActive()
{
	if(CLOCKStatus && (1 << ACTIVE_STATUS))
 494:	20 91 74 00 	lds	r18, 0x0074
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	21 11       	cpse	r18, r1
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <CLOCKIsActive+0x10>
 4a0:	80 e0       	ldi	r24, 0x00	; 0
 4a2:	90 e0       	ldi	r25, 0x00	; 0
		return 1;
	else
		return 0;
}
 4a4:	08 95       	ret

000004a6 <CLOCKInit>:

void CLOCKInit()
{
	ASSR |= (1 << AS2); // set timer in async mode
 4a6:	82 b5       	in	r24, 0x22	; 34
 4a8:	88 60       	ori	r24, 0x08	; 8
 4aa:	82 bd       	out	0x22, r24	; 34
	
	TCNT2 = 0;
 4ac:	14 bc       	out	0x24, r1	; 36
	TCCR2 = (1 << CS22) | (1 << CS20);
 4ae:	85 e0       	ldi	r24, 0x05	; 5
 4b0:	85 bd       	out	0x25, r24	; 37
	
	while(ASSR & 0x07);
 4b2:	82 b5       	in	r24, 0x22	; 34
 4b4:	87 70       	andi	r24, 0x07	; 7
 4b6:	e9 f7       	brne	.-6      	; 0x4b2 <CLOCKInit+0xc>
 4b8:	08 95       	ret

000004ba <main>:
#include <avr/interrupt.h>
#include <util/delay.h>

int main(void)
{
    DDRB = 0x00000001;
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b00011110;
 4be:	8e e1       	ldi	r24, 0x1E	; 30
 4c0:	88 bb       	out	0x18, r24	; 24
	
	LEDInit(6, &DDRD, &PORTD, &DDRC, &PORTC);
 4c2:	05 e3       	ldi	r16, 0x35	; 53
 4c4:	10 e0       	ldi	r17, 0x00	; 0
 4c6:	24 e3       	ldi	r18, 0x34	; 52
 4c8:	30 e0       	ldi	r19, 0x00	; 0
 4ca:	42 e3       	ldi	r20, 0x32	; 50
 4cc:	50 e0       	ldi	r21, 0x00	; 0
 4ce:	61 e3       	ldi	r22, 0x31	; 49
 4d0:	70 e0       	ldi	r23, 0x00	; 0
 4d2:	86 e0       	ldi	r24, 0x06	; 6
 4d4:	0e 94 69 01 	call	0x2d2	; 0x2d2 <LEDInit>
	CLOCKInit();
 4d8:	0e 94 53 02 	call	0x4a6	; 0x4a6 <CLOCKInit>
	sei();
 4dc:	78 94       	sei
	
	clearDisplay();
 4de:	0e 94 b3 00 	call	0x166	; 0x166 <clearDisplay>
	CLOCKStart();
 4e2:	0e 94 38 02 	call	0x470	; 0x470 <CLOCKStart>
	}
}

void LEDSetPosition(uint8_t pos)
{
	position = pos % MAX_NUM_DISPLAY;
 4e6:	02 e0       	ldi	r16, 0x02	; 2
 4e8:	14 e0       	ldi	r17, 0x04	; 4
	
	while(1)
	{
		if(CLOCKStatus & (1 << CHANGE_STATUS))
 4ea:	80 91 74 00 	lds	r24, 0x0074
 4ee:	80 ff       	sbrs	r24, 0
 4f0:	1a c0       	rjmp	.+52     	; 0x526 <main+0x6c>
		{
			int *tab = getTime();
 4f2:	0e 94 03 02 	call	0x406	; 0x406 <getTime>
 4f6:	ec 01       	movw	r28, r24
 4f8:	10 92 79 00 	sts	0x0079, r1
		
			LEDSetPosition(0);
			LEDSetNumberWithZero(tab[0]);
 4fc:	88 81       	ld	r24, Y
 4fe:	99 81       	ldd	r25, Y+1	; 0x01
 500:	0e 94 24 01 	call	0x248	; 0x248 <LEDSetNumberWithZero>
 504:	00 93 79 00 	sts	0x0079, r16
		
		 	LEDSetPosition(2);
		 	LEDSetNumberWithZero(tab[1]);
 508:	8a 81       	ldd	r24, Y+2	; 0x02
 50a:	9b 81       	ldd	r25, Y+3	; 0x03
 50c:	0e 94 24 01 	call	0x248	; 0x248 <LEDSetNumberWithZero>
 510:	10 93 79 00 	sts	0x0079, r17
		 		
			LEDSetPosition(4);
			LEDSetNumberWithZero(tab[2]);
 514:	8c 81       	ldd	r24, Y+4	; 0x04
 516:	9d 81       	ldd	r25, Y+5	; 0x05
 518:	0e 94 24 01 	call	0x248	; 0x248 <LEDSetNumberWithZero>
		
 		 	CLOCKStatus &= ~(1 << CHANGE_STATUS);
 51c:	80 91 74 00 	lds	r24, 0x0074
 520:	8e 7f       	andi	r24, 0xFE	; 254
 522:	80 93 74 00 	sts	0x0074, r24
 		}
 		
		if(!(PINB & (1 << 1))) //RST
 526:	b1 99       	sbic	0x16, 1	; 22
 528:	13 c0       	rjmp	.+38     	; 0x550 <main+0x96>
	return time;
}

void CLOCKReset()
{
	CLOCKTime = 0;
 52a:	10 92 75 00 	sts	0x0075, r1
 52e:	10 92 76 00 	sts	0x0076, r1
 532:	10 92 77 00 	sts	0x0077, r1
 536:	10 92 78 00 	sts	0x0078, r1
		{
			CLOCKReset();
			clearDisplay();
 53a:	0e 94 b3 00 	call	0x166	; 0x166 <clearDisplay>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 53e:	8f e3       	ldi	r24, 0x3F	; 63
 540:	9c e9       	ldi	r25, 0x9C	; 156
 542:	01 97       	sbiw	r24, 0x01	; 1
 544:	f1 f7       	brne	.-4      	; 0x542 <main+0x88>
 546:	00 c0       	rjmp	.+0      	; 0x548 <main+0x8e>
 548:	00 00       	nop

			_delay_ms(20);
			while(!(PINB & (1 << 1)));
 54a:	b1 9b       	sbis	0x16, 1	; 22
 54c:	fe cf       	rjmp	.-4      	; 0x54a <main+0x90>
 54e:	cd cf       	rjmp	.-102    	; 0x4ea <main+0x30>
		}
		else if(!(PINB & (1 << 2))) // UP
 550:	b2 99       	sbic	0x16, 2	; 22
 552:	09 c0       	rjmp	.+18     	; 0x566 <main+0xac>
 554:	8f e3       	ldi	r24, 0x3F	; 63
 556:	9c e9       	ldi	r25, 0x9C	; 156
 558:	01 97       	sbiw	r24, 0x01	; 1
 55a:	f1 f7       	brne	.-4      	; 0x558 <main+0x9e>
 55c:	00 c0       	rjmp	.+0      	; 0x55e <main+0xa4>
 55e:	00 00       	nop
		{

			_delay_ms(20);
			while(!(PINB & (1 << 2)));
 560:	b2 9b       	sbis	0x16, 2	; 22
 562:	fe cf       	rjmp	.-4      	; 0x560 <main+0xa6>
 564:	c2 cf       	rjmp	.-124    	; 0x4ea <main+0x30>
		}
		else if(!(PINB & (1 << 3))) // DOWN
 566:	b3 99       	sbic	0x16, 3	; 22
 568:	09 c0       	rjmp	.+18     	; 0x57c <main+0xc2>
 56a:	8f e3       	ldi	r24, 0x3F	; 63
 56c:	9c e9       	ldi	r25, 0x9C	; 156
 56e:	01 97       	sbiw	r24, 0x01	; 1
 570:	f1 f7       	brne	.-4      	; 0x56e <main+0xb4>
 572:	00 c0       	rjmp	.+0      	; 0x574 <main+0xba>
 574:	00 00       	nop
		{

			_delay_ms(20);
			while(!(PINB & (1 << 3)));
 576:	b3 9b       	sbis	0x16, 3	; 22
 578:	fe cf       	rjmp	.-4      	; 0x576 <main+0xbc>
 57a:	b7 cf       	rjmp	.-146    	; 0x4ea <main+0x30>
		}
		else if(!(PINB & (1 << 4))) // OK, STOP, START
 57c:	b4 99       	sbic	0x16, 4	; 22
 57e:	b5 cf       	rjmp	.-150    	; 0x4ea <main+0x30>
		{
			if(CLOCKIsActive())
 580:	0e 94 4a 02 	call	0x494	; 0x494 <CLOCKIsActive>
 584:	89 2b       	or	r24, r25
 586:	19 f0       	breq	.+6      	; 0x58e <main+0xd4>
				CLOCKStop();
 588:	0e 94 41 02 	call	0x482	; 0x482 <CLOCKStop>
 58c:	02 c0       	rjmp	.+4      	; 0x592 <main+0xd8>
			else
				CLOCKStart();
 58e:	0e 94 38 02 	call	0x470	; 0x470 <CLOCKStart>
 592:	8f e3       	ldi	r24, 0x3F	; 63
 594:	9c e9       	ldi	r25, 0x9C	; 156
 596:	01 97       	sbiw	r24, 0x01	; 1
 598:	f1 f7       	brne	.-4      	; 0x596 <main+0xdc>
 59a:	00 c0       	rjmp	.+0      	; 0x59c <main+0xe2>
 59c:	00 00       	nop
			
			_delay_ms(20);
			while(!(PINB & (1 << 4)));
 59e:	b4 9b       	sbis	0x16, 4	; 22
 5a0:	fe cf       	rjmp	.-4      	; 0x59e <main+0xe4>
 5a2:	a3 cf       	rjmp	.-186    	; 0x4ea <main+0x30>

000005a4 <__divmodhi4>:
 5a4:	97 fb       	bst	r25, 7
 5a6:	07 2e       	mov	r0, r23
 5a8:	16 f4       	brtc	.+4      	; 0x5ae <__divmodhi4+0xa>
 5aa:	00 94       	com	r0
 5ac:	07 d0       	rcall	.+14     	; 0x5bc <__divmodhi4_neg1>
 5ae:	77 fd       	sbrc	r23, 7
 5b0:	09 d0       	rcall	.+18     	; 0x5c4 <__divmodhi4_neg2>
 5b2:	0e 94 0e 03 	call	0x61c	; 0x61c <__udivmodhi4>
 5b6:	07 fc       	sbrc	r0, 7
 5b8:	05 d0       	rcall	.+10     	; 0x5c4 <__divmodhi4_neg2>
 5ba:	3e f4       	brtc	.+14     	; 0x5ca <__divmodhi4_exit>

000005bc <__divmodhi4_neg1>:
 5bc:	90 95       	com	r25
 5be:	81 95       	neg	r24
 5c0:	9f 4f       	sbci	r25, 0xFF	; 255
 5c2:	08 95       	ret

000005c4 <__divmodhi4_neg2>:
 5c4:	70 95       	com	r23
 5c6:	61 95       	neg	r22
 5c8:	7f 4f       	sbci	r23, 0xFF	; 255

000005ca <__divmodhi4_exit>:
 5ca:	08 95       	ret

000005cc <__udivmodsi4>:
 5cc:	a1 e2       	ldi	r26, 0x21	; 33
 5ce:	1a 2e       	mov	r1, r26
 5d0:	aa 1b       	sub	r26, r26
 5d2:	bb 1b       	sub	r27, r27
 5d4:	fd 01       	movw	r30, r26
 5d6:	0d c0       	rjmp	.+26     	; 0x5f2 <__udivmodsi4_ep>

000005d8 <__udivmodsi4_loop>:
 5d8:	aa 1f       	adc	r26, r26
 5da:	bb 1f       	adc	r27, r27
 5dc:	ee 1f       	adc	r30, r30
 5de:	ff 1f       	adc	r31, r31
 5e0:	a2 17       	cp	r26, r18
 5e2:	b3 07       	cpc	r27, r19
 5e4:	e4 07       	cpc	r30, r20
 5e6:	f5 07       	cpc	r31, r21
 5e8:	20 f0       	brcs	.+8      	; 0x5f2 <__udivmodsi4_ep>
 5ea:	a2 1b       	sub	r26, r18
 5ec:	b3 0b       	sbc	r27, r19
 5ee:	e4 0b       	sbc	r30, r20
 5f0:	f5 0b       	sbc	r31, r21

000005f2 <__udivmodsi4_ep>:
 5f2:	66 1f       	adc	r22, r22
 5f4:	77 1f       	adc	r23, r23
 5f6:	88 1f       	adc	r24, r24
 5f8:	99 1f       	adc	r25, r25
 5fa:	1a 94       	dec	r1
 5fc:	69 f7       	brne	.-38     	; 0x5d8 <__udivmodsi4_loop>
 5fe:	60 95       	com	r22
 600:	70 95       	com	r23
 602:	80 95       	com	r24
 604:	90 95       	com	r25
 606:	9b 01       	movw	r18, r22
 608:	ac 01       	movw	r20, r24
 60a:	bd 01       	movw	r22, r26
 60c:	cf 01       	movw	r24, r30
 60e:	08 95       	ret

00000610 <__tablejump2__>:
 610:	ee 0f       	add	r30, r30
 612:	ff 1f       	adc	r31, r31

00000614 <__tablejump__>:
 614:	05 90       	lpm	r0, Z+
 616:	f4 91       	lpm	r31, Z
 618:	e0 2d       	mov	r30, r0
 61a:	09 94       	ijmp

0000061c <__udivmodhi4>:
 61c:	aa 1b       	sub	r26, r26
 61e:	bb 1b       	sub	r27, r27
 620:	51 e1       	ldi	r21, 0x11	; 17
 622:	07 c0       	rjmp	.+14     	; 0x632 <__udivmodhi4_ep>

00000624 <__udivmodhi4_loop>:
 624:	aa 1f       	adc	r26, r26
 626:	bb 1f       	adc	r27, r27
 628:	a6 17       	cp	r26, r22
 62a:	b7 07       	cpc	r27, r23
 62c:	10 f0       	brcs	.+4      	; 0x632 <__udivmodhi4_ep>
 62e:	a6 1b       	sub	r26, r22
 630:	b7 0b       	sbc	r27, r23

00000632 <__udivmodhi4_ep>:
 632:	88 1f       	adc	r24, r24
 634:	99 1f       	adc	r25, r25
 636:	5a 95       	dec	r21
 638:	a9 f7       	brne	.-22     	; 0x624 <__udivmodhi4_loop>
 63a:	80 95       	com	r24
 63c:	90 95       	com	r25
 63e:	bc 01       	movw	r22, r24
 640:	cd 01       	movw	r24, r26
 642:	08 95       	ret

00000644 <sprintf>:
 644:	ae e0       	ldi	r26, 0x0E	; 14
 646:	b0 e0       	ldi	r27, 0x00	; 0
 648:	e8 e2       	ldi	r30, 0x28	; 40
 64a:	f3 e0       	ldi	r31, 0x03	; 3
 64c:	0c 94 ca 05 	jmp	0xb94	; 0xb94 <__prologue_saves__+0x1c>
 650:	0d 89       	ldd	r16, Y+21	; 0x15
 652:	1e 89       	ldd	r17, Y+22	; 0x16
 654:	86 e0       	ldi	r24, 0x06	; 6
 656:	8c 83       	std	Y+4, r24	; 0x04
 658:	1a 83       	std	Y+2, r17	; 0x02
 65a:	09 83       	std	Y+1, r16	; 0x01
 65c:	8f ef       	ldi	r24, 0xFF	; 255
 65e:	9f e7       	ldi	r25, 0x7F	; 127
 660:	9e 83       	std	Y+6, r25	; 0x06
 662:	8d 83       	std	Y+5, r24	; 0x05
 664:	ae 01       	movw	r20, r28
 666:	47 5e       	subi	r20, 0xE7	; 231
 668:	5f 4f       	sbci	r21, 0xFF	; 255
 66a:	6f 89       	ldd	r22, Y+23	; 0x17
 66c:	78 8d       	ldd	r23, Y+24	; 0x18
 66e:	ce 01       	movw	r24, r28
 670:	01 96       	adiw	r24, 0x01	; 1
 672:	0e 94 44 03 	call	0x688	; 0x688 <vfprintf>
 676:	ef 81       	ldd	r30, Y+7	; 0x07
 678:	f8 85       	ldd	r31, Y+8	; 0x08
 67a:	e0 0f       	add	r30, r16
 67c:	f1 1f       	adc	r31, r17
 67e:	10 82       	st	Z, r1
 680:	2e 96       	adiw	r28, 0x0e	; 14
 682:	e4 e0       	ldi	r30, 0x04	; 4
 684:	0c 94 e6 05 	jmp	0xbcc	; 0xbcc <__epilogue_restores__+0x1c>

00000688 <vfprintf>:
 688:	ac e0       	ldi	r26, 0x0C	; 12
 68a:	b0 e0       	ldi	r27, 0x00	; 0
 68c:	ea e4       	ldi	r30, 0x4A	; 74
 68e:	f3 e0       	ldi	r31, 0x03	; 3
 690:	0c 94 bc 05 	jmp	0xb78	; 0xb78 <__prologue_saves__>
 694:	7c 01       	movw	r14, r24
 696:	6b 01       	movw	r12, r22
 698:	8a 01       	movw	r16, r20
 69a:	fc 01       	movw	r30, r24
 69c:	17 82       	std	Z+7, r1	; 0x07
 69e:	16 82       	std	Z+6, r1	; 0x06
 6a0:	83 81       	ldd	r24, Z+3	; 0x03
 6a2:	81 ff       	sbrs	r24, 1
 6a4:	bd c1       	rjmp	.+890    	; 0xa20 <vfprintf+0x398>
 6a6:	ce 01       	movw	r24, r28
 6a8:	01 96       	adiw	r24, 0x01	; 1
 6aa:	4c 01       	movw	r8, r24
 6ac:	f7 01       	movw	r30, r14
 6ae:	93 81       	ldd	r25, Z+3	; 0x03
 6b0:	f6 01       	movw	r30, r12
 6b2:	93 fd       	sbrc	r25, 3
 6b4:	85 91       	lpm	r24, Z+
 6b6:	93 ff       	sbrs	r25, 3
 6b8:	81 91       	ld	r24, Z+
 6ba:	6f 01       	movw	r12, r30
 6bc:	88 23       	and	r24, r24
 6be:	09 f4       	brne	.+2      	; 0x6c2 <vfprintf+0x3a>
 6c0:	ab c1       	rjmp	.+854    	; 0xa18 <vfprintf+0x390>
 6c2:	85 32       	cpi	r24, 0x25	; 37
 6c4:	39 f4       	brne	.+14     	; 0x6d4 <vfprintf+0x4c>
 6c6:	93 fd       	sbrc	r25, 3
 6c8:	85 91       	lpm	r24, Z+
 6ca:	93 ff       	sbrs	r25, 3
 6cc:	81 91       	ld	r24, Z+
 6ce:	6f 01       	movw	r12, r30
 6d0:	85 32       	cpi	r24, 0x25	; 37
 6d2:	29 f4       	brne	.+10     	; 0x6de <vfprintf+0x56>
 6d4:	b7 01       	movw	r22, r14
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	0e 94 2c 05 	call	0xa58	; 0xa58 <fputc>
 6dc:	e7 cf       	rjmp	.-50     	; 0x6ac <vfprintf+0x24>
 6de:	51 2c       	mov	r5, r1
 6e0:	31 2c       	mov	r3, r1
 6e2:	20 e0       	ldi	r18, 0x00	; 0
 6e4:	20 32       	cpi	r18, 0x20	; 32
 6e6:	a0 f4       	brcc	.+40     	; 0x710 <vfprintf+0x88>
 6e8:	8b 32       	cpi	r24, 0x2B	; 43
 6ea:	69 f0       	breq	.+26     	; 0x706 <vfprintf+0x7e>
 6ec:	30 f4       	brcc	.+12     	; 0x6fa <vfprintf+0x72>
 6ee:	80 32       	cpi	r24, 0x20	; 32
 6f0:	59 f0       	breq	.+22     	; 0x708 <vfprintf+0x80>
 6f2:	83 32       	cpi	r24, 0x23	; 35
 6f4:	69 f4       	brne	.+26     	; 0x710 <vfprintf+0x88>
 6f6:	20 61       	ori	r18, 0x10	; 16
 6f8:	2c c0       	rjmp	.+88     	; 0x752 <vfprintf+0xca>
 6fa:	8d 32       	cpi	r24, 0x2D	; 45
 6fc:	39 f0       	breq	.+14     	; 0x70c <vfprintf+0x84>
 6fe:	80 33       	cpi	r24, 0x30	; 48
 700:	39 f4       	brne	.+14     	; 0x710 <vfprintf+0x88>
 702:	21 60       	ori	r18, 0x01	; 1
 704:	26 c0       	rjmp	.+76     	; 0x752 <vfprintf+0xca>
 706:	22 60       	ori	r18, 0x02	; 2
 708:	24 60       	ori	r18, 0x04	; 4
 70a:	23 c0       	rjmp	.+70     	; 0x752 <vfprintf+0xca>
 70c:	28 60       	ori	r18, 0x08	; 8
 70e:	21 c0       	rjmp	.+66     	; 0x752 <vfprintf+0xca>
 710:	27 fd       	sbrc	r18, 7
 712:	27 c0       	rjmp	.+78     	; 0x762 <vfprintf+0xda>
 714:	30 ed       	ldi	r19, 0xD0	; 208
 716:	38 0f       	add	r19, r24
 718:	3a 30       	cpi	r19, 0x0A	; 10
 71a:	78 f4       	brcc	.+30     	; 0x73a <vfprintf+0xb2>
 71c:	26 ff       	sbrs	r18, 6
 71e:	06 c0       	rjmp	.+12     	; 0x72c <vfprintf+0xa4>
 720:	fa e0       	ldi	r31, 0x0A	; 10
 722:	5f 9e       	mul	r5, r31
 724:	30 0d       	add	r19, r0
 726:	11 24       	eor	r1, r1
 728:	53 2e       	mov	r5, r19
 72a:	13 c0       	rjmp	.+38     	; 0x752 <vfprintf+0xca>
 72c:	8a e0       	ldi	r24, 0x0A	; 10
 72e:	38 9e       	mul	r3, r24
 730:	30 0d       	add	r19, r0
 732:	11 24       	eor	r1, r1
 734:	33 2e       	mov	r3, r19
 736:	20 62       	ori	r18, 0x20	; 32
 738:	0c c0       	rjmp	.+24     	; 0x752 <vfprintf+0xca>
 73a:	8e 32       	cpi	r24, 0x2E	; 46
 73c:	21 f4       	brne	.+8      	; 0x746 <vfprintf+0xbe>
 73e:	26 fd       	sbrc	r18, 6
 740:	6b c1       	rjmp	.+726    	; 0xa18 <vfprintf+0x390>
 742:	20 64       	ori	r18, 0x40	; 64
 744:	06 c0       	rjmp	.+12     	; 0x752 <vfprintf+0xca>
 746:	8c 36       	cpi	r24, 0x6C	; 108
 748:	11 f4       	brne	.+4      	; 0x74e <vfprintf+0xc6>
 74a:	20 68       	ori	r18, 0x80	; 128
 74c:	02 c0       	rjmp	.+4      	; 0x752 <vfprintf+0xca>
 74e:	88 36       	cpi	r24, 0x68	; 104
 750:	41 f4       	brne	.+16     	; 0x762 <vfprintf+0xda>
 752:	f6 01       	movw	r30, r12
 754:	93 fd       	sbrc	r25, 3
 756:	85 91       	lpm	r24, Z+
 758:	93 ff       	sbrs	r25, 3
 75a:	81 91       	ld	r24, Z+
 75c:	6f 01       	movw	r12, r30
 75e:	81 11       	cpse	r24, r1
 760:	c1 cf       	rjmp	.-126    	; 0x6e4 <vfprintf+0x5c>
 762:	98 2f       	mov	r25, r24
 764:	9f 7d       	andi	r25, 0xDF	; 223
 766:	95 54       	subi	r25, 0x45	; 69
 768:	93 30       	cpi	r25, 0x03	; 3
 76a:	28 f4       	brcc	.+10     	; 0x776 <vfprintf+0xee>
 76c:	0c 5f       	subi	r16, 0xFC	; 252
 76e:	1f 4f       	sbci	r17, 0xFF	; 255
 770:	ff e3       	ldi	r31, 0x3F	; 63
 772:	f9 83       	std	Y+1, r31	; 0x01
 774:	0d c0       	rjmp	.+26     	; 0x790 <vfprintf+0x108>
 776:	83 36       	cpi	r24, 0x63	; 99
 778:	31 f0       	breq	.+12     	; 0x786 <vfprintf+0xfe>
 77a:	83 37       	cpi	r24, 0x73	; 115
 77c:	71 f0       	breq	.+28     	; 0x79a <vfprintf+0x112>
 77e:	83 35       	cpi	r24, 0x53	; 83
 780:	09 f0       	breq	.+2      	; 0x784 <vfprintf+0xfc>
 782:	5b c0       	rjmp	.+182    	; 0x83a <vfprintf+0x1b2>
 784:	22 c0       	rjmp	.+68     	; 0x7ca <vfprintf+0x142>
 786:	f8 01       	movw	r30, r16
 788:	80 81       	ld	r24, Z
 78a:	89 83       	std	Y+1, r24	; 0x01
 78c:	0e 5f       	subi	r16, 0xFE	; 254
 78e:	1f 4f       	sbci	r17, 0xFF	; 255
 790:	44 24       	eor	r4, r4
 792:	43 94       	inc	r4
 794:	51 2c       	mov	r5, r1
 796:	54 01       	movw	r10, r8
 798:	15 c0       	rjmp	.+42     	; 0x7c4 <vfprintf+0x13c>
 79a:	38 01       	movw	r6, r16
 79c:	f2 e0       	ldi	r31, 0x02	; 2
 79e:	6f 0e       	add	r6, r31
 7a0:	71 1c       	adc	r7, r1
 7a2:	f8 01       	movw	r30, r16
 7a4:	a0 80       	ld	r10, Z
 7a6:	b1 80       	ldd	r11, Z+1	; 0x01
 7a8:	26 ff       	sbrs	r18, 6
 7aa:	03 c0       	rjmp	.+6      	; 0x7b2 <vfprintf+0x12a>
 7ac:	65 2d       	mov	r22, r5
 7ae:	70 e0       	ldi	r23, 0x00	; 0
 7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <vfprintf+0x12e>
 7b2:	6f ef       	ldi	r22, 0xFF	; 255
 7b4:	7f ef       	ldi	r23, 0xFF	; 255
 7b6:	c5 01       	movw	r24, r10
 7b8:	2c 87       	std	Y+12, r18	; 0x0c
 7ba:	0e 94 21 05 	call	0xa42	; 0xa42 <strnlen>
 7be:	2c 01       	movw	r4, r24
 7c0:	83 01       	movw	r16, r6
 7c2:	2c 85       	ldd	r18, Y+12	; 0x0c
 7c4:	2f 77       	andi	r18, 0x7F	; 127
 7c6:	22 2e       	mov	r2, r18
 7c8:	17 c0       	rjmp	.+46     	; 0x7f8 <vfprintf+0x170>
 7ca:	38 01       	movw	r6, r16
 7cc:	f2 e0       	ldi	r31, 0x02	; 2
 7ce:	6f 0e       	add	r6, r31
 7d0:	71 1c       	adc	r7, r1
 7d2:	f8 01       	movw	r30, r16
 7d4:	a0 80       	ld	r10, Z
 7d6:	b1 80       	ldd	r11, Z+1	; 0x01
 7d8:	26 ff       	sbrs	r18, 6
 7da:	03 c0       	rjmp	.+6      	; 0x7e2 <vfprintf+0x15a>
 7dc:	65 2d       	mov	r22, r5
 7de:	70 e0       	ldi	r23, 0x00	; 0
 7e0:	02 c0       	rjmp	.+4      	; 0x7e6 <vfprintf+0x15e>
 7e2:	6f ef       	ldi	r22, 0xFF	; 255
 7e4:	7f ef       	ldi	r23, 0xFF	; 255
 7e6:	c5 01       	movw	r24, r10
 7e8:	2c 87       	std	Y+12, r18	; 0x0c
 7ea:	0e 94 16 05 	call	0xa2c	; 0xa2c <strnlen_P>
 7ee:	2c 01       	movw	r4, r24
 7f0:	2c 85       	ldd	r18, Y+12	; 0x0c
 7f2:	20 68       	ori	r18, 0x80	; 128
 7f4:	22 2e       	mov	r2, r18
 7f6:	83 01       	movw	r16, r6
 7f8:	23 fc       	sbrc	r2, 3
 7fa:	1b c0       	rjmp	.+54     	; 0x832 <vfprintf+0x1aa>
 7fc:	83 2d       	mov	r24, r3
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	48 16       	cp	r4, r24
 802:	59 06       	cpc	r5, r25
 804:	b0 f4       	brcc	.+44     	; 0x832 <vfprintf+0x1aa>
 806:	b7 01       	movw	r22, r14
 808:	80 e2       	ldi	r24, 0x20	; 32
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	0e 94 2c 05 	call	0xa58	; 0xa58 <fputc>
 810:	3a 94       	dec	r3
 812:	f4 cf       	rjmp	.-24     	; 0x7fc <vfprintf+0x174>
 814:	f5 01       	movw	r30, r10
 816:	27 fc       	sbrc	r2, 7
 818:	85 91       	lpm	r24, Z+
 81a:	27 fe       	sbrs	r2, 7
 81c:	81 91       	ld	r24, Z+
 81e:	5f 01       	movw	r10, r30
 820:	b7 01       	movw	r22, r14
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	0e 94 2c 05 	call	0xa58	; 0xa58 <fputc>
 828:	31 10       	cpse	r3, r1
 82a:	3a 94       	dec	r3
 82c:	f1 e0       	ldi	r31, 0x01	; 1
 82e:	4f 1a       	sub	r4, r31
 830:	51 08       	sbc	r5, r1
 832:	41 14       	cp	r4, r1
 834:	51 04       	cpc	r5, r1
 836:	71 f7       	brne	.-36     	; 0x814 <vfprintf+0x18c>
 838:	e5 c0       	rjmp	.+458    	; 0xa04 <vfprintf+0x37c>
 83a:	84 36       	cpi	r24, 0x64	; 100
 83c:	11 f0       	breq	.+4      	; 0x842 <vfprintf+0x1ba>
 83e:	89 36       	cpi	r24, 0x69	; 105
 840:	39 f5       	brne	.+78     	; 0x890 <vfprintf+0x208>
 842:	f8 01       	movw	r30, r16
 844:	27 ff       	sbrs	r18, 7
 846:	07 c0       	rjmp	.+14     	; 0x856 <vfprintf+0x1ce>
 848:	60 81       	ld	r22, Z
 84a:	71 81       	ldd	r23, Z+1	; 0x01
 84c:	82 81       	ldd	r24, Z+2	; 0x02
 84e:	93 81       	ldd	r25, Z+3	; 0x03
 850:	0c 5f       	subi	r16, 0xFC	; 252
 852:	1f 4f       	sbci	r17, 0xFF	; 255
 854:	08 c0       	rjmp	.+16     	; 0x866 <vfprintf+0x1de>
 856:	60 81       	ld	r22, Z
 858:	71 81       	ldd	r23, Z+1	; 0x01
 85a:	88 27       	eor	r24, r24
 85c:	77 fd       	sbrc	r23, 7
 85e:	80 95       	com	r24
 860:	98 2f       	mov	r25, r24
 862:	0e 5f       	subi	r16, 0xFE	; 254
 864:	1f 4f       	sbci	r17, 0xFF	; 255
 866:	2f 76       	andi	r18, 0x6F	; 111
 868:	b2 2e       	mov	r11, r18
 86a:	97 ff       	sbrs	r25, 7
 86c:	09 c0       	rjmp	.+18     	; 0x880 <vfprintf+0x1f8>
 86e:	90 95       	com	r25
 870:	80 95       	com	r24
 872:	70 95       	com	r23
 874:	61 95       	neg	r22
 876:	7f 4f       	sbci	r23, 0xFF	; 255
 878:	8f 4f       	sbci	r24, 0xFF	; 255
 87a:	9f 4f       	sbci	r25, 0xFF	; 255
 87c:	20 68       	ori	r18, 0x80	; 128
 87e:	b2 2e       	mov	r11, r18
 880:	2a e0       	ldi	r18, 0x0A	; 10
 882:	30 e0       	ldi	r19, 0x00	; 0
 884:	a4 01       	movw	r20, r8
 886:	0e 94 5e 05 	call	0xabc	; 0xabc <__ultoa_invert>
 88a:	a8 2e       	mov	r10, r24
 88c:	a8 18       	sub	r10, r8
 88e:	44 c0       	rjmp	.+136    	; 0x918 <vfprintf+0x290>
 890:	85 37       	cpi	r24, 0x75	; 117
 892:	29 f4       	brne	.+10     	; 0x89e <vfprintf+0x216>
 894:	2f 7e       	andi	r18, 0xEF	; 239
 896:	b2 2e       	mov	r11, r18
 898:	2a e0       	ldi	r18, 0x0A	; 10
 89a:	30 e0       	ldi	r19, 0x00	; 0
 89c:	25 c0       	rjmp	.+74     	; 0x8e8 <vfprintf+0x260>
 89e:	f2 2f       	mov	r31, r18
 8a0:	f9 7f       	andi	r31, 0xF9	; 249
 8a2:	bf 2e       	mov	r11, r31
 8a4:	8f 36       	cpi	r24, 0x6F	; 111
 8a6:	c1 f0       	breq	.+48     	; 0x8d8 <vfprintf+0x250>
 8a8:	18 f4       	brcc	.+6      	; 0x8b0 <vfprintf+0x228>
 8aa:	88 35       	cpi	r24, 0x58	; 88
 8ac:	79 f0       	breq	.+30     	; 0x8cc <vfprintf+0x244>
 8ae:	b4 c0       	rjmp	.+360    	; 0xa18 <vfprintf+0x390>
 8b0:	80 37       	cpi	r24, 0x70	; 112
 8b2:	19 f0       	breq	.+6      	; 0x8ba <vfprintf+0x232>
 8b4:	88 37       	cpi	r24, 0x78	; 120
 8b6:	21 f0       	breq	.+8      	; 0x8c0 <vfprintf+0x238>
 8b8:	af c0       	rjmp	.+350    	; 0xa18 <vfprintf+0x390>
 8ba:	2f 2f       	mov	r18, r31
 8bc:	20 61       	ori	r18, 0x10	; 16
 8be:	b2 2e       	mov	r11, r18
 8c0:	b4 fe       	sbrs	r11, 4
 8c2:	0d c0       	rjmp	.+26     	; 0x8de <vfprintf+0x256>
 8c4:	8b 2d       	mov	r24, r11
 8c6:	84 60       	ori	r24, 0x04	; 4
 8c8:	b8 2e       	mov	r11, r24
 8ca:	09 c0       	rjmp	.+18     	; 0x8de <vfprintf+0x256>
 8cc:	24 ff       	sbrs	r18, 4
 8ce:	0a c0       	rjmp	.+20     	; 0x8e4 <vfprintf+0x25c>
 8d0:	9f 2f       	mov	r25, r31
 8d2:	96 60       	ori	r25, 0x06	; 6
 8d4:	b9 2e       	mov	r11, r25
 8d6:	06 c0       	rjmp	.+12     	; 0x8e4 <vfprintf+0x25c>
 8d8:	28 e0       	ldi	r18, 0x08	; 8
 8da:	30 e0       	ldi	r19, 0x00	; 0
 8dc:	05 c0       	rjmp	.+10     	; 0x8e8 <vfprintf+0x260>
 8de:	20 e1       	ldi	r18, 0x10	; 16
 8e0:	30 e0       	ldi	r19, 0x00	; 0
 8e2:	02 c0       	rjmp	.+4      	; 0x8e8 <vfprintf+0x260>
 8e4:	20 e1       	ldi	r18, 0x10	; 16
 8e6:	32 e0       	ldi	r19, 0x02	; 2
 8e8:	f8 01       	movw	r30, r16
 8ea:	b7 fe       	sbrs	r11, 7
 8ec:	07 c0       	rjmp	.+14     	; 0x8fc <vfprintf+0x274>
 8ee:	60 81       	ld	r22, Z
 8f0:	71 81       	ldd	r23, Z+1	; 0x01
 8f2:	82 81       	ldd	r24, Z+2	; 0x02
 8f4:	93 81       	ldd	r25, Z+3	; 0x03
 8f6:	0c 5f       	subi	r16, 0xFC	; 252
 8f8:	1f 4f       	sbci	r17, 0xFF	; 255
 8fa:	06 c0       	rjmp	.+12     	; 0x908 <vfprintf+0x280>
 8fc:	60 81       	ld	r22, Z
 8fe:	71 81       	ldd	r23, Z+1	; 0x01
 900:	80 e0       	ldi	r24, 0x00	; 0
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	0e 5f       	subi	r16, 0xFE	; 254
 906:	1f 4f       	sbci	r17, 0xFF	; 255
 908:	a4 01       	movw	r20, r8
 90a:	0e 94 5e 05 	call	0xabc	; 0xabc <__ultoa_invert>
 90e:	a8 2e       	mov	r10, r24
 910:	a8 18       	sub	r10, r8
 912:	fb 2d       	mov	r31, r11
 914:	ff 77       	andi	r31, 0x7F	; 127
 916:	bf 2e       	mov	r11, r31
 918:	b6 fe       	sbrs	r11, 6
 91a:	0b c0       	rjmp	.+22     	; 0x932 <vfprintf+0x2aa>
 91c:	2b 2d       	mov	r18, r11
 91e:	2e 7f       	andi	r18, 0xFE	; 254
 920:	a5 14       	cp	r10, r5
 922:	50 f4       	brcc	.+20     	; 0x938 <vfprintf+0x2b0>
 924:	b4 fe       	sbrs	r11, 4
 926:	0a c0       	rjmp	.+20     	; 0x93c <vfprintf+0x2b4>
 928:	b2 fc       	sbrc	r11, 2
 92a:	08 c0       	rjmp	.+16     	; 0x93c <vfprintf+0x2b4>
 92c:	2b 2d       	mov	r18, r11
 92e:	2e 7e       	andi	r18, 0xEE	; 238
 930:	05 c0       	rjmp	.+10     	; 0x93c <vfprintf+0x2b4>
 932:	7a 2c       	mov	r7, r10
 934:	2b 2d       	mov	r18, r11
 936:	03 c0       	rjmp	.+6      	; 0x93e <vfprintf+0x2b6>
 938:	7a 2c       	mov	r7, r10
 93a:	01 c0       	rjmp	.+2      	; 0x93e <vfprintf+0x2b6>
 93c:	75 2c       	mov	r7, r5
 93e:	24 ff       	sbrs	r18, 4
 940:	0d c0       	rjmp	.+26     	; 0x95c <vfprintf+0x2d4>
 942:	fe 01       	movw	r30, r28
 944:	ea 0d       	add	r30, r10
 946:	f1 1d       	adc	r31, r1
 948:	80 81       	ld	r24, Z
 94a:	80 33       	cpi	r24, 0x30	; 48
 94c:	11 f4       	brne	.+4      	; 0x952 <vfprintf+0x2ca>
 94e:	29 7e       	andi	r18, 0xE9	; 233
 950:	09 c0       	rjmp	.+18     	; 0x964 <vfprintf+0x2dc>
 952:	22 ff       	sbrs	r18, 2
 954:	06 c0       	rjmp	.+12     	; 0x962 <vfprintf+0x2da>
 956:	73 94       	inc	r7
 958:	73 94       	inc	r7
 95a:	04 c0       	rjmp	.+8      	; 0x964 <vfprintf+0x2dc>
 95c:	82 2f       	mov	r24, r18
 95e:	86 78       	andi	r24, 0x86	; 134
 960:	09 f0       	breq	.+2      	; 0x964 <vfprintf+0x2dc>
 962:	73 94       	inc	r7
 964:	23 fd       	sbrc	r18, 3
 966:	13 c0       	rjmp	.+38     	; 0x98e <vfprintf+0x306>
 968:	20 ff       	sbrs	r18, 0
 96a:	06 c0       	rjmp	.+12     	; 0x978 <vfprintf+0x2f0>
 96c:	5a 2c       	mov	r5, r10
 96e:	73 14       	cp	r7, r3
 970:	18 f4       	brcc	.+6      	; 0x978 <vfprintf+0x2f0>
 972:	53 0c       	add	r5, r3
 974:	57 18       	sub	r5, r7
 976:	73 2c       	mov	r7, r3
 978:	73 14       	cp	r7, r3
 97a:	68 f4       	brcc	.+26     	; 0x996 <vfprintf+0x30e>
 97c:	b7 01       	movw	r22, r14
 97e:	80 e2       	ldi	r24, 0x20	; 32
 980:	90 e0       	ldi	r25, 0x00	; 0
 982:	2c 87       	std	Y+12, r18	; 0x0c
 984:	0e 94 2c 05 	call	0xa58	; 0xa58 <fputc>
 988:	73 94       	inc	r7
 98a:	2c 85       	ldd	r18, Y+12	; 0x0c
 98c:	f5 cf       	rjmp	.-22     	; 0x978 <vfprintf+0x2f0>
 98e:	73 14       	cp	r7, r3
 990:	10 f4       	brcc	.+4      	; 0x996 <vfprintf+0x30e>
 992:	37 18       	sub	r3, r7
 994:	01 c0       	rjmp	.+2      	; 0x998 <vfprintf+0x310>
 996:	31 2c       	mov	r3, r1
 998:	24 ff       	sbrs	r18, 4
 99a:	12 c0       	rjmp	.+36     	; 0x9c0 <vfprintf+0x338>
 99c:	b7 01       	movw	r22, r14
 99e:	80 e3       	ldi	r24, 0x30	; 48
 9a0:	90 e0       	ldi	r25, 0x00	; 0
 9a2:	2c 87       	std	Y+12, r18	; 0x0c
 9a4:	0e 94 2c 05 	call	0xa58	; 0xa58 <fputc>
 9a8:	2c 85       	ldd	r18, Y+12	; 0x0c
 9aa:	22 ff       	sbrs	r18, 2
 9ac:	17 c0       	rjmp	.+46     	; 0x9dc <vfprintf+0x354>
 9ae:	21 ff       	sbrs	r18, 1
 9b0:	03 c0       	rjmp	.+6      	; 0x9b8 <vfprintf+0x330>
 9b2:	88 e5       	ldi	r24, 0x58	; 88
 9b4:	90 e0       	ldi	r25, 0x00	; 0
 9b6:	02 c0       	rjmp	.+4      	; 0x9bc <vfprintf+0x334>
 9b8:	88 e7       	ldi	r24, 0x78	; 120
 9ba:	90 e0       	ldi	r25, 0x00	; 0
 9bc:	b7 01       	movw	r22, r14
 9be:	0c c0       	rjmp	.+24     	; 0x9d8 <vfprintf+0x350>
 9c0:	82 2f       	mov	r24, r18
 9c2:	86 78       	andi	r24, 0x86	; 134
 9c4:	59 f0       	breq	.+22     	; 0x9dc <vfprintf+0x354>
 9c6:	21 fd       	sbrc	r18, 1
 9c8:	02 c0       	rjmp	.+4      	; 0x9ce <vfprintf+0x346>
 9ca:	80 e2       	ldi	r24, 0x20	; 32
 9cc:	01 c0       	rjmp	.+2      	; 0x9d0 <vfprintf+0x348>
 9ce:	8b e2       	ldi	r24, 0x2B	; 43
 9d0:	27 fd       	sbrc	r18, 7
 9d2:	8d e2       	ldi	r24, 0x2D	; 45
 9d4:	b7 01       	movw	r22, r14
 9d6:	90 e0       	ldi	r25, 0x00	; 0
 9d8:	0e 94 2c 05 	call	0xa58	; 0xa58 <fputc>
 9dc:	a5 14       	cp	r10, r5
 9de:	38 f4       	brcc	.+14     	; 0x9ee <vfprintf+0x366>
 9e0:	b7 01       	movw	r22, r14
 9e2:	80 e3       	ldi	r24, 0x30	; 48
 9e4:	90 e0       	ldi	r25, 0x00	; 0
 9e6:	0e 94 2c 05 	call	0xa58	; 0xa58 <fputc>
 9ea:	5a 94       	dec	r5
 9ec:	f7 cf       	rjmp	.-18     	; 0x9dc <vfprintf+0x354>
 9ee:	aa 94       	dec	r10
 9f0:	f4 01       	movw	r30, r8
 9f2:	ea 0d       	add	r30, r10
 9f4:	f1 1d       	adc	r31, r1
 9f6:	80 81       	ld	r24, Z
 9f8:	b7 01       	movw	r22, r14
 9fa:	90 e0       	ldi	r25, 0x00	; 0
 9fc:	0e 94 2c 05 	call	0xa58	; 0xa58 <fputc>
 a00:	a1 10       	cpse	r10, r1
 a02:	f5 cf       	rjmp	.-22     	; 0x9ee <vfprintf+0x366>
 a04:	33 20       	and	r3, r3
 a06:	09 f4       	brne	.+2      	; 0xa0a <vfprintf+0x382>
 a08:	51 ce       	rjmp	.-862    	; 0x6ac <vfprintf+0x24>
 a0a:	b7 01       	movw	r22, r14
 a0c:	80 e2       	ldi	r24, 0x20	; 32
 a0e:	90 e0       	ldi	r25, 0x00	; 0
 a10:	0e 94 2c 05 	call	0xa58	; 0xa58 <fputc>
 a14:	3a 94       	dec	r3
 a16:	f6 cf       	rjmp	.-20     	; 0xa04 <vfprintf+0x37c>
 a18:	f7 01       	movw	r30, r14
 a1a:	86 81       	ldd	r24, Z+6	; 0x06
 a1c:	97 81       	ldd	r25, Z+7	; 0x07
 a1e:	02 c0       	rjmp	.+4      	; 0xa24 <vfprintf+0x39c>
 a20:	8f ef       	ldi	r24, 0xFF	; 255
 a22:	9f ef       	ldi	r25, 0xFF	; 255
 a24:	2c 96       	adiw	r28, 0x0c	; 12
 a26:	e2 e1       	ldi	r30, 0x12	; 18
 a28:	0c 94 d8 05 	jmp	0xbb0	; 0xbb0 <__epilogue_restores__>

00000a2c <strnlen_P>:
 a2c:	fc 01       	movw	r30, r24
 a2e:	05 90       	lpm	r0, Z+
 a30:	61 50       	subi	r22, 0x01	; 1
 a32:	70 40       	sbci	r23, 0x00	; 0
 a34:	01 10       	cpse	r0, r1
 a36:	d8 f7       	brcc	.-10     	; 0xa2e <strnlen_P+0x2>
 a38:	80 95       	com	r24
 a3a:	90 95       	com	r25
 a3c:	8e 0f       	add	r24, r30
 a3e:	9f 1f       	adc	r25, r31
 a40:	08 95       	ret

00000a42 <strnlen>:
 a42:	fc 01       	movw	r30, r24
 a44:	61 50       	subi	r22, 0x01	; 1
 a46:	70 40       	sbci	r23, 0x00	; 0
 a48:	01 90       	ld	r0, Z+
 a4a:	01 10       	cpse	r0, r1
 a4c:	d8 f7       	brcc	.-10     	; 0xa44 <strnlen+0x2>
 a4e:	80 95       	com	r24
 a50:	90 95       	com	r25
 a52:	8e 0f       	add	r24, r30
 a54:	9f 1f       	adc	r25, r31
 a56:	08 95       	ret

00000a58 <fputc>:
 a58:	0f 93       	push	r16
 a5a:	1f 93       	push	r17
 a5c:	cf 93       	push	r28
 a5e:	df 93       	push	r29
 a60:	18 2f       	mov	r17, r24
 a62:	09 2f       	mov	r16, r25
 a64:	eb 01       	movw	r28, r22
 a66:	8b 81       	ldd	r24, Y+3	; 0x03
 a68:	81 fd       	sbrc	r24, 1
 a6a:	03 c0       	rjmp	.+6      	; 0xa72 <fputc+0x1a>
 a6c:	8f ef       	ldi	r24, 0xFF	; 255
 a6e:	9f ef       	ldi	r25, 0xFF	; 255
 a70:	20 c0       	rjmp	.+64     	; 0xab2 <fputc+0x5a>
 a72:	82 ff       	sbrs	r24, 2
 a74:	10 c0       	rjmp	.+32     	; 0xa96 <fputc+0x3e>
 a76:	4e 81       	ldd	r20, Y+6	; 0x06
 a78:	5f 81       	ldd	r21, Y+7	; 0x07
 a7a:	2c 81       	ldd	r18, Y+4	; 0x04
 a7c:	3d 81       	ldd	r19, Y+5	; 0x05
 a7e:	42 17       	cp	r20, r18
 a80:	53 07       	cpc	r21, r19
 a82:	7c f4       	brge	.+30     	; 0xaa2 <fputc+0x4a>
 a84:	e8 81       	ld	r30, Y
 a86:	f9 81       	ldd	r31, Y+1	; 0x01
 a88:	9f 01       	movw	r18, r30
 a8a:	2f 5f       	subi	r18, 0xFF	; 255
 a8c:	3f 4f       	sbci	r19, 0xFF	; 255
 a8e:	39 83       	std	Y+1, r19	; 0x01
 a90:	28 83       	st	Y, r18
 a92:	10 83       	st	Z, r17
 a94:	06 c0       	rjmp	.+12     	; 0xaa2 <fputc+0x4a>
 a96:	e8 85       	ldd	r30, Y+8	; 0x08
 a98:	f9 85       	ldd	r31, Y+9	; 0x09
 a9a:	81 2f       	mov	r24, r17
 a9c:	09 95       	icall
 a9e:	89 2b       	or	r24, r25
 aa0:	29 f7       	brne	.-54     	; 0xa6c <fputc+0x14>
 aa2:	2e 81       	ldd	r18, Y+6	; 0x06
 aa4:	3f 81       	ldd	r19, Y+7	; 0x07
 aa6:	2f 5f       	subi	r18, 0xFF	; 255
 aa8:	3f 4f       	sbci	r19, 0xFF	; 255
 aaa:	3f 83       	std	Y+7, r19	; 0x07
 aac:	2e 83       	std	Y+6, r18	; 0x06
 aae:	81 2f       	mov	r24, r17
 ab0:	90 2f       	mov	r25, r16
 ab2:	df 91       	pop	r29
 ab4:	cf 91       	pop	r28
 ab6:	1f 91       	pop	r17
 ab8:	0f 91       	pop	r16
 aba:	08 95       	ret

00000abc <__ultoa_invert>:
 abc:	fa 01       	movw	r30, r20
 abe:	aa 27       	eor	r26, r26
 ac0:	28 30       	cpi	r18, 0x08	; 8
 ac2:	51 f1       	breq	.+84     	; 0xb18 <__ultoa_invert+0x5c>
 ac4:	20 31       	cpi	r18, 0x10	; 16
 ac6:	81 f1       	breq	.+96     	; 0xb28 <__ultoa_invert+0x6c>
 ac8:	e8 94       	clt
 aca:	6f 93       	push	r22
 acc:	6e 7f       	andi	r22, 0xFE	; 254
 ace:	6e 5f       	subi	r22, 0xFE	; 254
 ad0:	7f 4f       	sbci	r23, 0xFF	; 255
 ad2:	8f 4f       	sbci	r24, 0xFF	; 255
 ad4:	9f 4f       	sbci	r25, 0xFF	; 255
 ad6:	af 4f       	sbci	r26, 0xFF	; 255
 ad8:	b1 e0       	ldi	r27, 0x01	; 1
 ada:	3e d0       	rcall	.+124    	; 0xb58 <__ultoa_invert+0x9c>
 adc:	b4 e0       	ldi	r27, 0x04	; 4
 ade:	3c d0       	rcall	.+120    	; 0xb58 <__ultoa_invert+0x9c>
 ae0:	67 0f       	add	r22, r23
 ae2:	78 1f       	adc	r23, r24
 ae4:	89 1f       	adc	r24, r25
 ae6:	9a 1f       	adc	r25, r26
 ae8:	a1 1d       	adc	r26, r1
 aea:	68 0f       	add	r22, r24
 aec:	79 1f       	adc	r23, r25
 aee:	8a 1f       	adc	r24, r26
 af0:	91 1d       	adc	r25, r1
 af2:	a1 1d       	adc	r26, r1
 af4:	6a 0f       	add	r22, r26
 af6:	71 1d       	adc	r23, r1
 af8:	81 1d       	adc	r24, r1
 afa:	91 1d       	adc	r25, r1
 afc:	a1 1d       	adc	r26, r1
 afe:	20 d0       	rcall	.+64     	; 0xb40 <__ultoa_invert+0x84>
 b00:	09 f4       	brne	.+2      	; 0xb04 <__ultoa_invert+0x48>
 b02:	68 94       	set
 b04:	3f 91       	pop	r19
 b06:	2a e0       	ldi	r18, 0x0A	; 10
 b08:	26 9f       	mul	r18, r22
 b0a:	11 24       	eor	r1, r1
 b0c:	30 19       	sub	r19, r0
 b0e:	30 5d       	subi	r19, 0xD0	; 208
 b10:	31 93       	st	Z+, r19
 b12:	de f6       	brtc	.-74     	; 0xaca <__ultoa_invert+0xe>
 b14:	cf 01       	movw	r24, r30
 b16:	08 95       	ret
 b18:	46 2f       	mov	r20, r22
 b1a:	47 70       	andi	r20, 0x07	; 7
 b1c:	40 5d       	subi	r20, 0xD0	; 208
 b1e:	41 93       	st	Z+, r20
 b20:	b3 e0       	ldi	r27, 0x03	; 3
 b22:	0f d0       	rcall	.+30     	; 0xb42 <__ultoa_invert+0x86>
 b24:	c9 f7       	brne	.-14     	; 0xb18 <__ultoa_invert+0x5c>
 b26:	f6 cf       	rjmp	.-20     	; 0xb14 <__ultoa_invert+0x58>
 b28:	46 2f       	mov	r20, r22
 b2a:	4f 70       	andi	r20, 0x0F	; 15
 b2c:	40 5d       	subi	r20, 0xD0	; 208
 b2e:	4a 33       	cpi	r20, 0x3A	; 58
 b30:	18 f0       	brcs	.+6      	; 0xb38 <__ultoa_invert+0x7c>
 b32:	49 5d       	subi	r20, 0xD9	; 217
 b34:	31 fd       	sbrc	r19, 1
 b36:	40 52       	subi	r20, 0x20	; 32
 b38:	41 93       	st	Z+, r20
 b3a:	02 d0       	rcall	.+4      	; 0xb40 <__ultoa_invert+0x84>
 b3c:	a9 f7       	brne	.-22     	; 0xb28 <__ultoa_invert+0x6c>
 b3e:	ea cf       	rjmp	.-44     	; 0xb14 <__ultoa_invert+0x58>
 b40:	b4 e0       	ldi	r27, 0x04	; 4
 b42:	a6 95       	lsr	r26
 b44:	97 95       	ror	r25
 b46:	87 95       	ror	r24
 b48:	77 95       	ror	r23
 b4a:	67 95       	ror	r22
 b4c:	ba 95       	dec	r27
 b4e:	c9 f7       	brne	.-14     	; 0xb42 <__ultoa_invert+0x86>
 b50:	00 97       	sbiw	r24, 0x00	; 0
 b52:	61 05       	cpc	r22, r1
 b54:	71 05       	cpc	r23, r1
 b56:	08 95       	ret
 b58:	9b 01       	movw	r18, r22
 b5a:	ac 01       	movw	r20, r24
 b5c:	0a 2e       	mov	r0, r26
 b5e:	06 94       	lsr	r0
 b60:	57 95       	ror	r21
 b62:	47 95       	ror	r20
 b64:	37 95       	ror	r19
 b66:	27 95       	ror	r18
 b68:	ba 95       	dec	r27
 b6a:	c9 f7       	brne	.-14     	; 0xb5e <__ultoa_invert+0xa2>
 b6c:	62 0f       	add	r22, r18
 b6e:	73 1f       	adc	r23, r19
 b70:	84 1f       	adc	r24, r20
 b72:	95 1f       	adc	r25, r21
 b74:	a0 1d       	adc	r26, r0
 b76:	08 95       	ret

00000b78 <__prologue_saves__>:
 b78:	2f 92       	push	r2
 b7a:	3f 92       	push	r3
 b7c:	4f 92       	push	r4
 b7e:	5f 92       	push	r5
 b80:	6f 92       	push	r6
 b82:	7f 92       	push	r7
 b84:	8f 92       	push	r8
 b86:	9f 92       	push	r9
 b88:	af 92       	push	r10
 b8a:	bf 92       	push	r11
 b8c:	cf 92       	push	r12
 b8e:	df 92       	push	r13
 b90:	ef 92       	push	r14
 b92:	ff 92       	push	r15
 b94:	0f 93       	push	r16
 b96:	1f 93       	push	r17
 b98:	cf 93       	push	r28
 b9a:	df 93       	push	r29
 b9c:	cd b7       	in	r28, 0x3d	; 61
 b9e:	de b7       	in	r29, 0x3e	; 62
 ba0:	ca 1b       	sub	r28, r26
 ba2:	db 0b       	sbc	r29, r27
 ba4:	0f b6       	in	r0, 0x3f	; 63
 ba6:	f8 94       	cli
 ba8:	de bf       	out	0x3e, r29	; 62
 baa:	0f be       	out	0x3f, r0	; 63
 bac:	cd bf       	out	0x3d, r28	; 61
 bae:	09 94       	ijmp

00000bb0 <__epilogue_restores__>:
 bb0:	2a 88       	ldd	r2, Y+18	; 0x12
 bb2:	39 88       	ldd	r3, Y+17	; 0x11
 bb4:	48 88       	ldd	r4, Y+16	; 0x10
 bb6:	5f 84       	ldd	r5, Y+15	; 0x0f
 bb8:	6e 84       	ldd	r6, Y+14	; 0x0e
 bba:	7d 84       	ldd	r7, Y+13	; 0x0d
 bbc:	8c 84       	ldd	r8, Y+12	; 0x0c
 bbe:	9b 84       	ldd	r9, Y+11	; 0x0b
 bc0:	aa 84       	ldd	r10, Y+10	; 0x0a
 bc2:	b9 84       	ldd	r11, Y+9	; 0x09
 bc4:	c8 84       	ldd	r12, Y+8	; 0x08
 bc6:	df 80       	ldd	r13, Y+7	; 0x07
 bc8:	ee 80       	ldd	r14, Y+6	; 0x06
 bca:	fd 80       	ldd	r15, Y+5	; 0x05
 bcc:	0c 81       	ldd	r16, Y+4	; 0x04
 bce:	1b 81       	ldd	r17, Y+3	; 0x03
 bd0:	aa 81       	ldd	r26, Y+2	; 0x02
 bd2:	b9 81       	ldd	r27, Y+1	; 0x01
 bd4:	ce 0f       	add	r28, r30
 bd6:	d1 1d       	adc	r29, r1
 bd8:	0f b6       	in	r0, 0x3f	; 63
 bda:	f8 94       	cli
 bdc:	de bf       	out	0x3e, r29	; 62
 bde:	0f be       	out	0x3f, r0	; 63
 be0:	cd bf       	out	0x3d, r28	; 61
 be2:	ed 01       	movw	r28, r26
 be4:	08 95       	ret

00000be6 <_exit>:
 be6:	f8 94       	cli

00000be8 <__stop_program>:
 be8:	ff cf       	rjmp	.-2      	; 0xbe8 <__stop_program>
